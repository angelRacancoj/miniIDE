/* The following code was generated by JFlex 1.6.1 */
package miniide.frontEnd;

import java_cup.runtime.*;
import javax.swing.JTextPane;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>/home/angel/NetBeansProjects/miniIDE/miniIDE/src/miniide/frontEnd/lexicoArch.flex</tt>
 */
public class LexerArch implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\0"
            + "\1\37\1\0\1\7\5\0\1\40\2\0\1\11\1\12\1\43\12\36"
            + "\2\0\1\41\1\0\1\42\2\0\32\7\4\0\1\7\1\0\1\20"
            + "\1\17\1\5\1\34\1\13\1\6\1\27\1\44\1\22\1\25\1\7"
            + "\1\23\1\4\1\14\1\16\1\32\1\45\1\15\1\30\1\31\1\26"
            + "\1\33\2\7\1\24\1\21\4\0\41\10\2\0\4\7\4\0\1\7"
            + "\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7"
            + "\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7"
            + "\21\0\160\10\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0"
            + "\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0"
            + "\5\10\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7\7\0"
            + "\1\7\1\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"
            + "\1\10\10\0\33\7\5\0\3\7\15\0\5\10\6\0\1\7\4\0"
            + "\13\10\5\0\53\7\25\10\12\36\4\0\2\7\1\10\143\7\1\0"
            + "\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\36"
            + "\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0"
            + "\131\7\13\10\1\7\16\0\12\36\41\7\11\10\2\7\4\0\1\7"
            + "\5\0\26\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0"
            + "\31\7\3\10\104\0\1\7\1\0\13\7\67\0\33\10\1\0\4\10"
            + "\66\7\3\10\1\7\22\10\1\7\7\10\12\7\2\10\2\0\12\36"
            + "\1\0\7\7\1\0\7\7\1\0\3\10\1\0\10\7\2\0\2\7"
            + "\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10"
            + "\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0"
            + "\2\7\1\0\3\7\2\10\2\0\12\36\4\7\7\0\1\7\5\0"
            + "\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0"
            + "\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0"
            + "\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7\0"
            + "\12\36\2\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0\3\7"
            + "\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10"
            + "\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7"
            + "\2\10\2\0\12\36\1\0\1\7\17\0\3\10\1\0\10\7\2\0"
            + "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"
            + "\1\10\1\7\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0"
            + "\2\7\1\0\3\7\2\10\2\0\12\36\1\0\1\7\20\0\1\10"
            + "\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0"
            + "\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\4\0"
            + "\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10\16\0"
            + "\12\36\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0"
            + "\27\7\1\0\12\7\1\0\5\7\3\0\1\7\7\10\1\0\3\10"
            + "\1\0\4\10\7\0\2\10\1\0\2\7\6\0\2\7\2\10\2\0"
            + "\12\36\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0"
            + "\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0\3\10\1\0"
            + "\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10\2\0\12\36"
            + "\1\0\2\7\17\0\2\10\1\0\10\7\1\0\3\7\1\0\51\7"
            + "\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7\10\0\1\10"
            + "\10\0\2\7\2\10\2\0\12\36\12\0\6\7\2\0\2\10\1\0"
            + "\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0"
            + "\1\10\4\0\6\10\1\0\1\10\1\0\10\10\6\0\12\35\2\0"
            + "\2\10\15\0\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0"
            + "\12\36\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0"
            + "\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0"
            + "\1\7\2\0\2\7\1\0\4\7\1\10\2\7\6\10\1\0\2\10"
            + "\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0\12\36\2\0"
            + "\4\7\40\0\1\7\27\0\2\10\6\0\12\36\13\0\1\10\1\0"
            + "\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7\4\0\24\10"
            + "\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10\71\0\53\7"
            + "\24\10\1\7\12\36\6\0\6\7\4\10\4\7\3\10\1\7\3\10"
            + "\2\7\7\10\3\7\4\10\15\7\14\10\1\7\1\10\12\36\4\10"
            + "\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7"
            + "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7"
            + "\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7"
            + "\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7"
            + "\2\0\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7"
            + "\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7"
            + "\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0"
            + "\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7"
            + "\1\10\2\0\12\36\41\0\3\10\2\0\12\36\6\0\130\7\10\0"
            + "\51\7\1\10\1\7\5\0\106\7\12\0\35\7\3\0\14\10\4\0"
            + "\14\10\12\0\12\36\36\7\2\0\5\7\13\0\54\7\4\0\21\10"
            + "\7\7\2\10\6\0\12\36\46\0\27\7\5\10\4\0\65\7\12\10"
            + "\1\0\35\10\2\0\1\10\12\36\6\0\12\36\15\0\1\7\130\0"
            + "\5\10\57\7\21\10\7\7\4\0\12\36\21\0\11\10\14\0\3\10"
            + "\36\7\15\10\2\7\12\36\54\7\16\10\14\0\44\7\24\10\10\0"
            + "\12\36\3\0\3\7\12\36\44\7\122\0\3\10\1\0\25\10\4\7"
            + "\1\10\4\7\3\10\2\7\11\0\300\7\47\10\25\0\4\10\u0116\7"
            + "\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7"
            + "\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7"
            + "\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7"
            + "\4\0\15\7\5\0\3\7\1\0\7\7\16\0\5\10\32\0\5\10"
            + "\20\0\2\7\23\0\1\7\13\0\5\10\5\0\6\10\1\0\1\7"
            + "\15\0\1\7\20\0\15\7\3\0\33\7\25\0\15\10\4\0\1\10"
            + "\3\0\14\10\21\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7"
            + "\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7"
            + "\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7"
            + "\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0\4\7\3\10\2\7"
            + "\14\0\46\7\1\0\1\7\5\0\1\7\2\0\70\7\7\0\1\7"
            + "\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0"
            + "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"
            + "\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7"
            + "\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7\1\0\132\7"
            + "\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7"
            + "\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0\56\7\2\0\u010d\7"
            + "\3\0\20\7\12\36\2\7\24\0\57\7\1\10\4\0\12\10\1\0"
            + "\31\7\7\0\1\10\120\7\2\10\45\0\11\7\2\0\147\7\2\0"
            + "\4\7\1\0\4\7\14\0\13\7\115\0\12\7\1\10\3\7\1\10"
            + "\4\7\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10"
            + "\62\7\21\10\13\0\12\36\6\0\22\10\6\7\3\0\1\7\4\0"
            + "\12\36\34\7\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10"
            + "\57\7\16\10\16\0\1\7\12\36\26\0\12\35\6\0\51\7\16\10"
            + "\11\0\3\7\1\10\10\7\2\10\2\0\12\36\6\0\27\7\3\0"
            + "\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10\5\7"
            + "\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10\2\0"
            + "\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7"
            + "\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\36\6\0"
            + "\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7\46\0"
            + "\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7\1\0"
            + "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0"
            + "\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10\20\0"
            + "\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0"
            + "\207\7\2\0\1\10\4\0\1\7\13\0\12\36\7\0\32\7\4\0"
            + "\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0"
            + "\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10\4\0"
            + "\14\7\1\0\32\7\1\0\23\7\1\0\2\7\1\0\17\7\2\0"
            + "\16\7\42\0\173\7\105\0\65\7\210\0\1\10\202\0\35\7\3\0"
            + "\61\7\57\0\37\7\21\0\33\7\65\0\36\7\2\0\44\7\4\0"
            + "\10\7\1\0\5\7\52\0\236\7\2\0\12\36\u0356\0\6\7\2\0"
            + "\1\7\1\0\54\7\1\0\2\7\3\0\1\7\2\0\27\7\252\0"
            + "\26\7\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7\3\10"
            + "\1\0\2\10\5\0\4\10\4\7\1\0\3\7\1\0\33\7\4\0"
            + "\3\10\4\0\1\10\40\0\35\7\203\0\66\7\12\0\26\7\12\0"
            + "\23\7\215\0\111\7\u03b7\0\3\10\65\7\17\10\37\0\12\36\20\0"
            + "\3\10\55\7\13\10\2\0\1\10\22\0\31\7\7\0\12\36\6\0"
            + "\3\10\44\7\16\10\1\0\12\36\100\0\3\10\60\7\16\10\4\7"
            + "\13\0\12\36\u0116\0\12\35\u01d6\0\12\35\u0176\0\12\35\46\0\53\7"
            + "\15\10\10\0\12\36\u0216\0\12\35\u0716\0\u036f\7\221\0\143\7\u0b9d\0"
            + "\u042f\7\u33d1\0\u0239\7\47\0\12\35\346\0\12\35\u03a6\0\105\7\13\0"
            + "\1\7\56\10\20\0\4\10\15\7\u4060\0\2\7\u2163\0\5\10\3\0"
            + "\26\10\2\0\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\7\1\0"
            + "\107\7\1\0\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0"
            + "\14\7\1\0\1\7\1\0\7\7\1\0\101\7\1\0\4\7\2\0"
            + "\10\7\1\0\7\7\1\0\34\7\1\0\4\7\1\0\5\7\1\0"
            + "\1\7\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0"
            + "\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0"
            + "\31\7\1\0\37\7\1\0\31\7\1\0\10\7\2\0\62\36\u1600\0"
            + "\4\7\1\0\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0"
            + "\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0"
            + "\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0"
            + "\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"
            + "\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0"
            + "\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\21\7\5\0"
            + "\3\7\1\0\5\7\1\0\21\7\u1144\0\ua6d7\7\51\0\u1035\7\13\0"
            + "\336\7\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
            + "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\1\0\1\1\2\2\1\3\3\1\1\3\23\0\1\4"
            + "\42\0\1\3\35\0\1\5\20\0\1\6\4\0\1\7"
            + "\4\0\1\10\2\0\1\11\6\0\1\12\3\0\1\13"
            + "\1\0\1\14\1\0\1\15\3\0\1\16\1\17\1\0"
            + "\1\20\1\0\1\21\1\22\1\23";

    private static int[] zzUnpackAction() {
        int[] result = new int[150];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\46\0\114\0\46\0\162\0\230\0\276\0\344"
            + "\0\u010a\0\u0130\0\230\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"
            + "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"
            + "\0\u0344\0\u036a\0\u0390\0\u03b6\0\46\0\u03dc\0\u0402\0\u0428"
            + "\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558"
            + "\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688"
            + "\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8"
            + "\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\46"
            + "\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2"
            + "\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22"
            + "\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52"
            + "\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\46\0\u0d36\0\u0d5c"
            + "\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c"
            + "\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\46\0\u0f96"
            + "\0\u0fbc\0\u0fe2\0\u1008\0\46\0\u102e\0\u1054\0\u107a\0\u10a0"
            + "\0\u0eb2\0\u10c6\0\u10ec\0\46\0\u1112\0\u1138\0\u115e\0\u1184"
            + "\0\u11aa\0\u11d0\0\46\0\u11f6\0\u121c\0\u1242\0\46\0\u1268"
            + "\0\46\0\u128e\0\46\0\u12b4\0\u12da\0\u1300\0\46\0\46"
            + "\0\u1326\0\46\0\u134c\0\46\0\46\0\46";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[150];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\2\1\3\2\4\4\5\3\2\22\5\2\6\1\7"
            + "\1\2\1\10\2\2\2\5\50\0\1\4\47\0\6\5"
            + "\1\11\22\5\1\0\1\5\5\0\2\5\11\0\1\12"
            + "\23\0\2\13\7\0\40\14\1\0\5\14\5\0\1\15"
            + "\6\0\1\16\1\17\2\0\1\20\11\0\1\21\10\0"
            + "\1\22\6\0\1\23\45\0\1\24\1\0\1\25\4\0"
            + "\1\26\1\27\1\0\1\30\1\0\1\31\4\0\1\32"
            + "\2\0\1\33\3\0\1\34\11\0\37\14\1\35\6\14"
            + "\15\0\1\36\46\0\1\37\55\0\1\40\34\0\1\41"
            + "\45\0\1\42\2\0\1\43\32\0\1\44\6\0\1\45"
            + "\1\46\2\0\1\47\11\0\1\50\20\0\1\51\60\0"
            + "\1\52\40\0\1\53\46\0\1\54\47\0\1\55\34\0"
            + "\1\56\57\0\1\57\7\0\1\60\44\0\1\61\32\0"
            + "\1\62\54\0\1\63\36\0\1\64\36\0\1\65\72\0"
            + "\1\66\21\0\1\67\56\0\1\70\74\0\1\71\15\0"
            + "\1\72\46\0\1\73\55\0\1\74\34\0\1\75\45\0"
            + "\1\76\2\0\1\77\33\0\1\100\54\0\1\101\6\0"
            + "\1\102\40\0\1\103\41\0\1\104\65\0\1\105\43\0"
            + "\1\106\31\0\1\107\46\0\1\110\43\0\1\111\6\0"
            + "\1\111\54\0\1\112\20\0\1\105\60\0\1\113\44\0"
            + "\1\114\46\0\1\115\71\0\1\116\25\0\1\117\47\0"
            + "\1\120\32\0\1\121\36\0\1\122\72\0\1\123\21\0"
            + "\1\124\56\0\1\125\74\0\1\126\21\0\1\102\42\0"
            + "\1\127\44\0\1\54\45\0\1\102\52\0\1\130\51\0"
            + "\1\131\41\0\1\132\53\0\1\133\37\0\1\102\54\0"
            + "\1\105\21\0\1\134\55\0\1\135\72\0\1\136\25\0"
            + "\1\137\5\0\1\140\30\0\1\141\45\0\1\142\52\0"
            + "\1\143\44\0\1\144\46\0\1\145\71\0\1\146\25\0"
            + "\1\147\47\0\1\150\30\0\1\151\47\0\1\152\51\0"
            + "\1\153\51\0\1\127\53\0\1\102\36\0\1\154\36\0"
            + "\1\155\65\0\1\156\54\0\1\157\10\0\1\160\71\0"
            + "\1\161\21\0\1\162\55\0\1\163\72\0\1\164\25\0"
            + "\1\165\5\0\1\166\30\0\1\167\45\0\1\170\67\0"
            + "\2\171\13\0\1\131\56\0\1\172\46\0\1\173\71\0"
            + "\1\174\21\0\1\175\60\0\1\176\27\0\1\177\54\0"
            + "\1\200\36\0\1\201\65\0\1\202\54\0\1\203\10\0"
            + "\1\204\71\0\1\205\27\0\1\127\46\0\1\206\73\0"
            + "\1\207\21\0\1\210\71\0\1\211\21\0\1\212\71\0"
            + "\1\213\21\0\1\214\60\0\1\215\27\0\1\216\74\0"
            + "\1\217\45\0\1\220\17\0\1\221\73\0\1\222\21\0"
            + "\1\223\71\0\1\224\45\0\1\225\45\0\1\226\3\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[4978];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\1\0\1\11\1\1\1\11\5\1\23\0\1\11\42\0"
            + "\1\11\35\0\1\11\20\0\1\11\4\0\1\11\4\0"
            + "\1\1\2\0\1\11\6\0\1\11\3\0\1\11\1\0"
            + "\1\11\1\0\1\11\3\0\2\11\1\0\1\11\1\0"
            + "\3\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[150];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    StringBuilder string = new StringBuilder();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }

    private void error(String message) {
        System.out.println("Error en linea line " + (yyline + 1) + ", columna " + (yycolumn + 1) + " : " + message);
    }

    /*
  	public LexerArch (java.io.Reader in) {
		this.zzReader = in;
	}
     */
    private void imprimirToken(String textSalida) {
        System.out.println("Leido: >> " + textSalida + " <<");
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public LexerArch(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 2866) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return symbol(sym.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        error("Simbolo invalido <" + yytext() + ">");
                    }
                    case 20:
                        break;
                    case 2: {
                        /*Nothing to do*/
                    }
                    case 21:
                        break;
                    case 3: {
                        imprimirToken(yytext());
                        return symbol(sym.nameArch, yytext());
                    }
                    case 22:
                        break;
                    case 4: {
                        imprimirToken(yytext());
                        return symbol(sym.fileRote, yytext());
                    }
                    case 23:
                        break;
                    case 5: {
                        imprimirToken(yytext());
                        return symbol(sym.rutaOp, yytext());
                    }
                    case 24:
                        break;
                    case 6: {
                        imprimirToken(yytext());
                        return symbol(sym.lsArchOp, yytext());
                    }
                    case 25:
                        break;
                    case 7: {
                        imprimirToken(yytext());
                        return symbol(sym.rutaCl, yytext());
                    }
                    case 26:
                        break;
                    case 8: {
                        imprimirToken(yytext());
                        return symbol(sym.CreateDate, yytext());
                    }
                    case 27:
                        break;
                    case 9: {
                        imprimirToken(yytext());
                        return symbol(sym.nombreOp, yytext());
                    }
                    case 28:
                        break;
                    case 10: {
                        imprimirToken(yytext());
                        return symbol(sym.lsArchCl, yytext());
                    }
                    case 29:
                        break;
                    case 11: {
                        imprimirToken(yytext());
                        return symbol(sym.archivoOp, yytext());
                    }
                    case 30:
                        break;
                    case 12: {
                        imprimirToken(yytext());
                        return symbol(sym.paqueteOp, yytext());
                    }
                    case 31:
                        break;
                    case 13: {
                        imprimirToken(yytext());
                        return symbol(sym.nombreCl, yytext());
                    }
                    case 32:
                        break;
                    case 14: {
                        imprimirToken(yytext());
                        return symbol(sym.creacionOp, yytext());
                    }
                    case 33:
                        break;
                    case 15: {
                        imprimirToken(yytext());
                        return symbol(sym.proyectoOp, yytext());
                    }
                    case 34:
                        break;
                    case 16: {
                        imprimirToken(yytext());
                        return symbol(sym.archivoCl, yytext());
                    }
                    case 35:
                        break;
                    case 17: {
                        imprimirToken(yytext());
                        return symbol(sym.paqueteCl, yytext());
                    }
                    case 36:
                        break;
                    case 18: {
                        imprimirToken(yytext());
                        return symbol(sym.creacionCl, yytext());
                    }
                    case 37:
                        break;
                    case 19: {
                        imprimirToken(yytext());
                        return symbol(sym.proyectoCl, yytext());
                    }
                    case 38:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Converts an int token code into the name of the token by reflection on
     * the cup symbol class/interface sym
     *
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    private String getTokenName(int token) {
        try {
            java.lang.reflect.Field[] classFields = sym.class.getFields();
            for (int i = 0; i < classFields.length; i++) {
                if (classFields[i].getInt(null) == token) {
                    return classFields[i].getName();
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

        return "UNKNOWN TOKEN";
    }

    /**
     * Same as next_token but also prints the token to standard out for
     * debugging.
     *
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
        java_cup.runtime.Symbol s = next_token();
        System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1) + " --" + yytext() + "--" + getTokenName(s.sym) + "--");
        return s;
    }

    /**
     * Runs the scanner on input files.
     *
     * This main method is the debugging routine for the scanner. It prints
     * debugging information about each returned token to System.out until the
     * end of file is reached, or an error occured.
     *
     * @param argv the command line, contains the filenames to run the scanner
     * on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java LexerArch [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                LexerArch scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new LexerArch(reader);
                    while (!scanner.zzAtEOF) {
                        scanner.debug_next_token();
                    }
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }

}
