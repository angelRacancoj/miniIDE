
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package miniide.frontEnd;

import java_cup.runtime.*;
import javax.swing.JTree;
import miniide.treeManager.treeController;
import javax.swing.tree.DefaultMutableTreeNode;
import miniide.exceptions.NodeNotFoundException;
import miniide.exceptions.NotFolderException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\005\005\000\002\004\005\000\002\006\005\000" +
    "\002\007\005\000\002\010\006\000\002\011\006\000\002" +
    "\011\007\000\002\011\007\000\002\011\006\000\002\011" +
    "\005\000\002\011\003\000\002\012\004\000\002\012\003" +
    "\000\002\013\005\000\002\014\004\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\004\005\001\002\000\004\002\060\001" +
    "\002\000\004\006\006\001\002\000\004\023\056\001\002" +
    "\000\004\005\055\001\002\000\004\010\011\001\002\000" +
    "\004\022\053\001\002\000\012\003\014\005\ufffc\016\013" +
    "\020\017\001\002\000\004\006\006\001\002\000\014\003" +
    "\ufff1\005\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002\000\010" +
    "\003\014\005\ufffe\016\013\001\002\000\014\003\014\005" +
    "\uffef\016\013\017\uffef\020\uffef\001\002\000\004\014\021" +
    "\001\002\000\004\005\ufffd\001\002\000\004\006\027\001" +
    "\002\000\004\021\025\001\002\000\006\014\021\021\uffec" +
    "\001\002\000\004\021\uffed\001\002\000\012\003\uffee\005" +
    "\uffee\016\uffee\017\uffee\001\002\000\004\012\033\001\002" +
    "\000\004\023\030\001\002\000\004\007\031\001\002\000" +
    "\004\012\ufffa\001\002\000\004\015\036\001\002\000\004" +
    "\024\034\001\002\000\004\013\035\001\002\000\004\015" +
    "\ufff8\001\002\000\006\014\ufff7\021\ufff7\001\002\000\010" +
    "\005\ufff0\017\ufff0\020\ufff0\001\002\000\004\005\uffff\001" +
    "\002\000\012\003\014\016\013\017\042\020\017\001\002" +
    "\000\014\003\ufff2\005\ufff2\016\ufff2\017\ufff2\020\ufff2\001" +
    "\002\000\010\003\014\016\013\017\050\001\002\000\006" +
    "\017\046\020\017\001\002\000\004\017\047\001\002\000" +
    "\014\003\ufff3\005\ufff3\016\ufff3\017\ufff3\020\ufff3\001\002" +
    "\000\014\003\ufff4\005\ufff4\016\ufff4\017\ufff4\020\ufff4\001" +
    "\002\000\014\003\ufff6\005\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\001\002\000\004\017\052\001\002\000\014\003\ufff5\005" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\001\002\000\004\011\054" +
    "\001\002\000\012\003\ufff9\005\ufff9\016\ufff9\020\ufff9\001" +
    "\002\000\004\002\000\001\002\000\004\007\057\001\002" +
    "\000\014\003\ufffb\010\ufffb\016\ufffb\017\ufffb\020\ufffb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\006\005\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\011\001\001\000\002\001\001\000" +
    "\010\011\015\012\017\013\014\001\001\000\004\005\040" +
    "\001\001\000\002\001\001\000\006\011\015\012\037\001" +
    "\001\000\006\011\015\012\036\001\001\000\006\010\022" +
    "\014\021\001\001\000\002\001\001\000\004\004\025\001" +
    "\001\000\002\001\001\000\006\010\022\014\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\015\012\043\013\042\001\001\000" +
    "\002\001\001\000\006\011\015\012\050\001\001\000\004" +
    "\013\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private static final String SEPARATOR = "/";
	String path = "";
    String nameProyect = "";
    boolean isDirectory;
	treeController control;

	public parser(LexerArch lex, treeController treeControl) {
		super(lex);
		this.control = treeControl;
	}

	public void syntax_error(Symbol cur_token) {
		String message = "Estructura invalida en posici√≥n " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(message);
	}

	public void execute(String pathIn, boolean Dir) {
		path = nameProyect + pathIn;

        DefaultMutableTreeNode baseNode = control.getBaseNodeOfPath(path);
        if (Dir) {
            try {
                control.createDirectory(baseNode, path.split(SEPARATOR));
            } catch (NodeNotFoundException | NotFolderException e) {
                System.out.println("\nError al agregar la carpeta " + e + "\n");
            }
        } else {
            try {
                control.createFile(baseNode, path.split(SEPARATOR));
            } catch (NodeNotFoundException | NotFolderException e) {
                System.out.println("\nError al agregar el archivo " + e + "\n");
            }
        }
    }

    public void setNameProyect(String nameProyect) {
        this.nameProyect = "/" + nameProyect;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROYECTO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROYECTO ::= proyectoOp CUERPO_PROYECT proyectoCl 
            {
              String RESULT =null;
		 System.out.println("Proyecto abierto exitosamente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROYECTO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO_PROYECT ::= NAME_DIR FECHA_CREATE ARCHIVOS_LS LIST_PAQUETES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PROYECT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO_PROYECT ::= NAME_DIR FECHA_CREATE ARCHIVOS_LS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PROYECT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO_PROYECT ::= NAME_DIR FECHA_CREATE LIST_PAQUETES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PROYECT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO_PROYECT ::= NAME_DIR FECHA_CREATE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PROYECT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NAME_DIR ::= nombreOp nameArch nombreCl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 execute(control.path(e),true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_DIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NOMBRE_FILE ::= nombreOp nameArch nombreCl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; System.out.println("El nombre del archivo es: " + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE_FILE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FECHA_CREATE ::= creacionOp CreateDate creacionCl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("la fecha es: " + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FECHA_CREATE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RUTA_FILE ::= rutaOp fileRote rutaCl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; System.out.println( "La ruta es: " + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUTA_FILE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ARCHIVO_FILE ::= archivoOp NOMBRE_FILE RUTA_FILE archivoCl 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 execute(e.replaceAll("\"",""),false); System.out.println("Archivo leido correctamente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARCHIVO_FILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PAQUETE ::= paqueteOp NAME_DIR ARCHIVOS_LS paqueteCl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PAQUETE ::= paqueteOp NAME_DIR ARCHIVOS_LS LIST_PAQUETES paqueteCl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PAQUETE ::= paqueteOp NAME_DIR LIST_PAQUETES ARCHIVOS_LS paqueteCl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PAQUETE ::= paqueteOp NAME_DIR LIST_PAQUETES paqueteCl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PAQUETE ::= paqueteOp NAME_DIR paqueteCl 
            {
              String RESULT =null;
		 System.out.println("paquetes indicados correctamente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PAQUETE ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Error al construir el paquete"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAQUETE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIST_PAQUETES ::= PAQUETE LIST_PAQUETES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_PAQUETES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_PAQUETES ::= PAQUETE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_PAQUETES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARCHIVOS_LS ::= lsArchOp LIST_FILES lsArchCl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARCHIVOS_LS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIST_FILES ::= ARCHIVO_FILE LIST_FILES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_FILES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_FILES ::= ARCHIVO_FILE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_FILES",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
