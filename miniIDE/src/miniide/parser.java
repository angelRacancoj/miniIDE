//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package miniide;

import java_cup.runtime.*;
import javax.swing.JTextPane;
import miniide.frontEnd.structure.Structure;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\266\000\002\002\004\000\002\004\005\000\002\004"
        + "\004\000\002\004\004\000\002\004\003\000\002\005\004"
        + "\000\002\005\003\000\002\006\003\000\002\006\003\000"
        + "\002\006\003\000\002\007\003\000\002\007\003\000\002"
        + "\010\003\000\002\010\003\000\002\011\003\000\002\011"
        + "\003\000\002\011\003\000\002\011\003\000\002\012\003"
        + "\000\002\012\003\000\002\013\003\000\002\013\003\000"
        + "\002\013\003\000\002\013\003\000\002\013\003\000\002"
        + "\013\003\000\002\002\003\000\002\003\003\000\002\100"
        + "\003\000\002\101\003\000\002\102\003\000\002\103\003"
        + "\000\002\104\003\000\002\105\003\000\002\106\003\000"
        + "\002\107\003\000\002\110\003\000\002\111\003\000\002"
        + "\112\003\000\002\113\003\000\002\114\003\000\002\115"
        + "\003\000\002\116\003\000\002\117\003\000\002\120\003"
        + "\000\002\014\003\000\002\121\003\000\002\122\003\000"
        + "\002\123\003\000\002\124\003\000\002\125\003\000\002"
        + "\126\003\000\002\127\003\000\002\130\003\000\002\131"
        + "\003\000\002\132\003\000\002\133\003\000\002\134\003"
        + "\000\002\135\003\000\002\136\003\000\002\137\003\000"
        + "\002\140\003\000\002\141\003\000\002\015\007\000\002"
        + "\015\003\000\002\016\006\000\002\017\003\000\002\017"
        + "\005\000\002\020\005\000\002\020\004\000\002\020\003"
        + "\000\002\021\004\000\002\021\004\000\002\021\004\000"
        + "\002\021\004\000\002\021\004\000\002\021\004\000\002"
        + "\021\003\000\002\021\003\000\002\021\003\000\002\021"
        + "\003\000\002\021\003\000\002\021\003\000\002\021\003"
        + "\000\002\022\004\000\002\023\003\000\002\023\003\000"
        + "\002\023\003\000\002\023\003\000\002\024\004\000\002"
        + "\025\005\000\002\025\004\000\002\026\007\000\002\030"
        + "\011\000\002\031\004\000\002\031\005\000\002\032\012"
        + "\000\002\032\011\000\002\032\012\000\002\032\011\000"
        + "\002\033\005\000\002\034\004\000\002\034\003\000\002"
        + "\037\004\000\002\037\003\000\002\041\004\000\002\042"
        + "\005\000\002\042\003\000\002\043\003\000\002\044\005"
        + "\000\002\045\006\000\002\045\005\000\002\045\007\000"
        + "\002\045\006\000\002\046\005\000\002\046\003\000\002"
        + "\047\004\000\002\050\006\000\002\050\005\000\002\051"
        + "\006\000\002\051\005\000\002\051\006\000\002\052\007"
        + "\000\002\052\006\000\002\053\011\000\002\053\010\000"
        + "\002\053\013\000\002\053\012\000\002\054\017\000\002"
        + "\054\016\000\002\055\007\000\002\056\004\000\002\056"
        + "\004\000\002\056\004\000\002\056\004\000\002\056\004"
        + "\000\002\056\004\000\002\056\004\000\002\056\004\000"
        + "\002\056\003\000\002\056\003\000\002\056\003\000\002"
        + "\056\003\000\002\056\003\000\002\056\003\000\002\056"
        + "\003\000\002\056\003\000\002\057\005\000\002\057\006"
        + "\000\002\057\006\000\002\060\004\000\002\061\004\000"
        + "\002\062\005\000\002\062\003\000\002\063\005\000\002"
        + "\063\003\000\002\064\005\000\002\064\003\000\002\065"
        + "\005\000\002\065\003\000\002\066\004\000\002\066\003"
        + "\000\002\067\005\000\002\067\003\000\002\067\003\000"
        + "\002\070\005\000\002\071\005\000\002\071\003\000\002"
        + "\072\005\000\002\072\003\000\002\073\005\000\002\073"
        + "\003\000\002\074\004\000\002\074\003\000\002\075\005"
        + "\000\002\075\003\000\002\075\003\000\002\076\006\000"
        + "\002\076\005\000\002\077\004\000\002\077\004\000\002"
        + "\077\004"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u0142\000\014\003\014\015\005\016\012\017\015\021"
        + "\011\001\002\000\016\002\ufffb\003\014\015\ufffb\016\ufffb"
        + "\017\ufffb\021\011\001\002\000\022\003\ufffa\006\ufffa\007"
        + "\ufffa\010\ufffa\011\ufffa\012\ufffa\022\ufffa\064\ufffa\001\002"
        + "\000\004\022\034\001\002\000\004\002\032\001\002\000"
        + "\004\047\022\001\002\000\004\047\uffe2\001\002\000\022"
        + "\003\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\022"
        + "\ufff9\064\ufff9\001\002\000\010\002\ufffd\003\014\021\011"
        + "\001\002\000\016\002\uffc1\003\uffc1\015\uffc1\016\uffc1\017"
        + "\uffc1\021\uffc1\001\002\000\022\003\ufff8\006\ufff8\007\ufff8"
        + "\010\ufff8\011\ufff8\012\ufff8\022\ufff8\064\ufff8\001\002\000"
        + "\010\015\005\016\012\017\015\001\002\000\010\002\ufffe"
        + "\003\014\021\011\001\002\000\004\002\000\001\002\000"
        + "\004\002\uffff\001\002\000\032\004\uffe1\005\uffe1\006\uffe1"
        + "\007\uffe1\010\uffe1\011\uffe1\014\uffe1\042\uffe1\047\uffe1\050"
        + "\uffe1\063\uffe1\064\uffe1\001\002\000\004\063\025\001\002"
        + "\000\004\050\026\001\002\000\004\050\uffde\001\002\000"
        + "\044\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0"
        + "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040"
        + "\uffe0\041\uffe0\044\uffe0\045\uffe0\050\uffe0\001\002\000\004"
        + "\044\030\001\002\000\046\002\uffdf\003\uffdf\006\uffdf\007"
        + "\uffdf\010\uffdf\011\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf"
        + "\021\uffdf\046\uffdf\052\uffdf\055\uffdf\056\uffdf\057\uffdf\062"
        + "\uffdf\064\uffdf\001\002\000\016\002\uffc2\003\uffc2\015\uffc2"
        + "\016\uffc2\017\uffc2\021\uffc2\001\002\000\004\002\001\001"
        + "\002\000\004\064\036\001\002\000\004\064\uffe5\001\002"
        + "\000\010\003\037\023\045\045\042\001\002\000\060\003"
        + "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4"
        + "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037"
        + "\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4"
        + "\050\uffe4\051\uffe4\064\uffe4\001\002\000\010\002\uffbb\003"
        + "\uffbb\021\uffbb\001\002\000\010\002\uffbf\003\uffbf\021\uffbf"
        + "\001\002\000\004\064\036\001\002\000\042\003\uffe7\006"
        + "\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\015\uffe7\016\uffe7"
        + "\017\uffe7\046\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7\062"
        + "\uffe7\064\uffe7\001\002\000\010\002\uffc0\003\uffc0\021\uffc0"
        + "\001\002\000\026\003\067\006\047\007\066\010\057\011"
        + "\072\015\005\016\012\017\015\046\056\064\036\001\002"
        + "\000\004\064\uffe3\001\002\000\004\064\036\001\002\000"
        + "\004\064\uffdd\001\002\000\004\064\036\001\002\000\026"
        + "\003\067\006\047\007\066\010\057\011\072\015\005\016"
        + "\012\017\015\046\uffb4\064\036\001\002\000\026\003\067"
        + "\006\047\007\066\010\057\011\072\015\005\016\012\017"
        + "\015\046\uffb0\064\036\001\002\000\026\003\067\006\047"
        + "\007\066\010\057\011\072\015\005\016\012\017\015\046"
        + "\uffb3\064\036\001\002\000\004\064\036\001\002\000\004"
        + "\064\ufff1\001\002\000\052\002\uffe6\003\uffe6\006\uffe6\007"
        + "\uffe6\010\uffe6\011\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6"
        + "\021\uffe6\046\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056"
        + "\uffe6\057\uffe6\062\uffe6\064\uffe6\001\002\000\004\064\uffda"
        + "\001\002\000\026\003\067\006\047\007\066\010\057\011"
        + "\072\015\005\016\012\017\015\046\uffaf\064\036\001\002"
        + "\000\004\046\056\001\002\000\026\003\067\006\047\007"
        + "\066\010\057\011\072\015\005\016\012\017\015\046\uffb2"
        + "\064\036\001\002\000\020\003\377\006\047\007\066\010"
        + "\057\011\072\012\376\064\036\001\002\000\026\003\067"
        + "\006\047\007\066\010\057\011\072\015\005\016\012\017"
        + "\015\046\uffb1\064\036\001\002\000\010\002\uffbc\003\uffbc"
        + "\021\uffbc\001\002\000\004\064\uffdc\001\002\000\004\046"
        + "\uffae\001\002\000\004\064\ufff0\001\002\000\006\043\075"
        + "\047\022\001\002\000\004\064\uffdb\001\002\000\020\004"
        + "\205\005\217\014\232\042\211\047\022\063\215\064\036"
        + "\001\002\000\014\006\047\007\066\010\057\011\072\050"
        + "\026\001\002\000\022\004\uffd8\005\uffd8\014\uffd8\020\uffd8"
        + "\042\uffd8\047\uffd8\063\uffd8\064\uffd8\001\002\000\004\064"
        + "\ufff3\001\002\000\004\064\036\001\002\000\004\064\ufff2"
        + "\001\002\000\006\050\uff8e\051\357\001\002\000\026\003"
        + "\uff94\006\uff94\007\uff94\010\uff94\011\uff94\015\uff94\016\uff94"
        + "\017\uff94\046\uff94\064\uff94\001\002\000\004\045\042\001"
        + "\002\000\004\050\026\001\002\000\004\045\042\001\002"
        + "\000\030\006\047\007\066\010\057\011\072\046\056\052"
        + "\115\055\124\056\125\057\114\062\122\064\036\001\002"
        + "\000\004\045\042\001\002\000\004\047\022\001\002\000"
        + "\004\047\022\001\002\000\004\047\022\001\002\000\004"
        + "\064\036\001\002\000\004\064\uffcc\001\002\000\004\047"
        + "\uffd1\001\002\000\032\006\047\007\066\010\057\011\072"
        + "\013\uff72\046\uff72\052\115\055\124\056\125\057\114\062"
        + "\122\064\036\001\002\000\032\006\047\007\066\010\057"
        + "\011\072\013\uff71\046\uff71\052\115\055\124\056\125\057"
        + "\114\062\122\064\036\001\002\000\004\064\036\001\002"
        + "\000\032\006\047\007\066\010\057\011\072\013\uff74\046"
        + "\uff74\052\115\055\124\056\125\057\114\062\122\064\036"
        + "\001\002\000\004\047\uffd2\001\002\000\032\006\047\007"
        + "\066\010\057\011\072\013\uff76\046\uff76\052\115\055\124"
        + "\056\125\057\114\062\122\064\036\001\002\000\004\047"
        + "\uffce\001\002\000\004\045\uffcd\001\002\000\032\006\047"
        + "\007\066\010\057\011\072\013\uff70\046\uff70\052\115\055"
        + "\124\056\125\057\114\062\122\064\036\001\002\000\032"
        + "\006\047\007\066\010\057\011\072\013\uff75\046\uff75\052"
        + "\115\055\124\056\125\057\114\062\122\064\036\001\002"
        + "\000\004\046\056\001\002\000\026\003\uff90\006\uff90\007"
        + "\uff90\010\uff90\011\uff90\015\uff90\016\uff90\017\uff90\046\uff90"
        + "\064\uff90\001\002\000\032\006\047\007\066\010\057\011"
        + "\072\013\uff73\046\uff73\052\115\055\124\056\125\057\114"
        + "\062\122\064\036\001\002\000\010\030\140\031\137\043"
        + "\075\001\002\000\032\006\047\007\066\010\057\011\072"
        + "\013\uff6f\046\uff6f\052\115\055\124\056\125\057\114\062"
        + "\122\064\036\001\002\000\006\013\uff77\046\uff77\001\002"
        + "\000\004\044\030\001\002\000\036\024\uffee\025\uffee\026"
        + "\uffee\027\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee"
        + "\037\uffee\040\uffee\041\uffee\044\uffee\050\uffee\001\002\000"
        + "\036\024\uffef\025\uffef\026\uffef\027\uffef\032\uffef\033\uffef"
        + "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\044"
        + "\uffef\050\uffef\001\002\000\032\006\uff5c\007\uff5c\010\uff5c"
        + "\011\uff5c\013\uff5c\046\uff5c\052\uff5c\055\uff5c\056\uff5c\057"
        + "\uff5c\062\uff5c\064\uff5c\001\002\000\006\013\uff7b\046\uff7b"
        + "\001\002\000\026\003\uff91\006\uff91\007\uff91\010\uff91\011"
        + "\uff91\015\uff91\016\uff91\017\uff91\046\uff91\064\uff91\001\002"
        + "\000\006\013\uff7d\046\uff7d\001\002\000\006\013\uff78\046"
        + "\uff78\001\002\000\006\013\uff7e\046\uff7e\001\002\000\006"
        + "\013\uff7c\046\uff7c\001\002\000\004\043\075\001\002\000"
        + "\004\004\153\001\002\000\004\060\155\001\002\000\010"
        + "\045\uffd6\060\uffd6\061\uffd6\001\002\000\004\064\036\001"
        + "\002\000\004\064\uffcb\001\002\000\016\032\161\033\157"
        + "\034\160\035\164\036\165\037\163\001\002\000\016\004"
        + "\uffec\005\uffec\014\uffec\042\uffec\047\uffec\064\uffec\001\002"
        + "\000\016\004\uffeb\005\uffeb\014\uffeb\042\uffeb\047\uffeb\064"
        + "\uffeb\001\002\000\016\004\uffed\005\uffed\014\uffed\042\uffed"
        + "\047\uffed\064\uffed\001\002\000\004\004\153\001\002\000"
        + "\016\004\uffe8\005\uffe8\014\uffe8\042\uffe8\047\uffe8\064\uffe8"
        + "\001\002\000\016\004\uffea\005\uffea\014\uffea\042\uffea\047"
        + "\uffea\064\uffea\001\002\000\016\004\uffe9\005\uffe9\014\uffe9"
        + "\042\uffe9\047\uffe9\064\uffe9\001\002\000\004\061\167\001"
        + "\002\000\004\004\uffca\001\002\000\004\004\153\001\002"
        + "\000\004\045\042\001\002\000\030\006\047\007\066\010"
        + "\057\011\072\046\056\052\115\055\124\056\125\057\114"
        + "\062\122\064\036\001\002\000\004\046\056\001\002\000"
        + "\032\006\uff80\007\uff80\010\uff80\011\uff80\013\uff80\046\uff80"
        + "\052\uff80\055\uff80\056\uff80\057\uff80\062\uff80\064\uff80\001"
        + "\002\000\032\006\uff81\007\uff81\010\uff81\011\uff81\013\uff81"
        + "\046\uff81\052\uff81\055\uff81\056\uff81\057\uff81\062\uff81\064"
        + "\uff81\001\002\000\006\013\uff79\046\uff79\001\002\000\006"
        + "\013\uff7a\046\uff7a\001\002\000\004\043\075\001\002\000"
        + "\020\004\205\005\217\014\232\042\211\047\022\063\215"
        + "\064\036\001\002\000\006\024\uff95\044\030\001\002\000"
        + "\042\003\uff50\006\uff50\007\uff50\010\uff50\011\uff50\013\uff50"
        + "\015\uff50\016\uff50\017\uff50\046\uff50\052\uff50\055\uff50\056"
        + "\uff50\057\uff50\062\uff50\064\uff50\001\002\000\022\024\ufff6"
        + "\032\161\033\157\034\160\035\164\036\165\037\163\044"
        + "\030\001\002\000\042\024\ufff5\025\ufff5\026\ufff5\027\ufff5"
        + "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036"
        + "\ufff5\037\ufff5\040\ufff5\041\ufff5\044\ufff5\050\ufff5\001\002"
        + "\000\030\024\uff54\032\uff54\033\uff54\034\uff54\035\uff54\036"
        + "\uff54\037\uff54\040\uff54\041\uff54\044\uff54\050\uff54\001\002"
        + "\000\030\024\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036"
        + "\uff56\037\uff56\040\uff56\041\uff56\044\uff56\050\uff56\001\002"
        + "\000\030\024\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036"
        + "\uff58\037\uff58\040\250\041\uff58\044\uff58\050\uff58\001\002"
        + "\000\014\004\uffc3\005\uffc3\014\uffc3\047\uffc3\064\uffc3\001"
        + "\002\000\026\024\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a"
        + "\036\uff5a\037\uff5a\041\244\044\uff5a\050\uff5a\001\002\000"
        + "\026\024\uff52\032\uff52\033\uff52\034\uff52\035\uff52\036\uff52"
        + "\037\uff52\040\uff52\041\uff52\044\030\001\002\000\016\004"
        + "\205\005\217\014\232\042\211\047\022\064\036\001\002"
        + "\000\010\024\ufff7\044\ufff7\050\ufff7\001\002\000\014\004"
        + "\205\005\217\014\232\047\022\064\036\001\002\000\042"
        + "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032"
        + "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4"
        + "\041\ufff4\044\ufff4\050\ufff4\001\002\000\036\024\uff62\025"
        + "\uff62\026\uff62\027\uff62\032\uff62\033\uff62\034\uff62\035\uff62"
        + "\036\uff62\037\uff62\040\uff62\041\uff62\044\uff62\050\uff62\001"
        + "\002\000\042\024\uff60\025\uff60\026\uff60\027\uff60\030\140"
        + "\031\137\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60\037"
        + "\uff60\040\uff60\041\uff60\044\uff60\050\uff60\001\002\000\036"
        + "\024\uff64\025\uff64\026\uff64\027\265\032\uff64\033\uff64\034"
        + "\uff64\035\uff64\036\uff64\037\uff64\040\uff64\041\uff64\044\uff64"
        + "\050\uff64\001\002\000\030\024\234\032\uff51\033\uff51\034"
        + "\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041\uff51\044\uff51"
        + "\050\uff51\001\002\000\042\024\uff5d\025\uff5d\026\uff5d\027"
        + "\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d"
        + "\036\uff5d\037\uff5d\040\uff5d\041\uff5d\044\uff5d\050\uff5d\001"
        + "\002\000\034\024\uff66\025\uff66\026\263\032\uff66\033\uff66"
        + "\034\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\044"
        + "\uff66\050\uff66\001\002\000\032\024\uff68\025\253\032\uff68"
        + "\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041"
        + "\uff68\044\uff68\050\uff68\001\002\000\010\024\234\044\uff96"
        + "\050\uff96\001\002\000\042\024\uff5e\025\uff5e\026\uff5e\027"
        + "\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e"
        + "\036\uff5e\037\uff5e\040\uff5e\041\uff5e\044\uff5e\050\uff5e\001"
        + "\002\000\004\044\030\001\002\000\030\024\uffd5\032\uffd5"
        + "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041"
        + "\uffd5\044\uffd5\050\uffd5\001\002\000\042\003\uff4d\006\uff4d"
        + "\007\uff4d\010\uff4d\011\uff4d\013\uff4d\015\uff4d\016\uff4d\017"
        + "\uff4d\046\uff4d\052\uff4d\055\uff4d\056\uff4d\057\uff4d\062\uff4d"
        + "\064\uff4d\001\002\000\020\004\uffc9\005\uffc9\014\uffc9\042"
        + "\uffc9\047\uffc9\063\uffc9\064\uffc9\001\002\000\020\004\205"
        + "\005\217\014\232\042\211\047\022\063\215\064\036\001"
        + "\002\000\010\024\uff95\044\uff95\050\uff95\001\002\000\024"
        + "\024\ufff6\032\161\033\157\034\160\035\164\036\165\037"
        + "\163\044\ufff6\050\ufff6\001\002\000\030\024\uff52\032\uff52"
        + "\033\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041"
        + "\uff52\044\uff52\050\uff52\001\002\000\006\044\uff97\050\uff97"
        + "\001\002\000\016\004\205\005\217\014\232\042\211\047"
        + "\022\064\036\001\002\000\026\024\uff5b\032\uff5b\033\uff5b"
        + "\034\uff5b\035\uff5b\036\uff5b\037\uff5b\041\244\044\uff5b\050"
        + "\uff5b\001\002\000\016\004\uffc5\005\uffc5\014\uffc5\042\uffc5"
        + "\047\uffc5\064\uffc5\001\002\000\016\004\205\005\217\014"
        + "\232\042\211\047\022\064\036\001\002\000\030\024\uff59"
        + "\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040"
        + "\250\041\uff59\044\uff59\050\uff59\001\002\000\016\004\205"
        + "\005\217\014\232\042\211\047\022\064\036\001\002\000"
        + "\016\004\uffc4\005\uffc4\014\uffc4\042\uffc4\047\uffc4\064\uffc4"
        + "\001\002\000\030\024\uff57\032\uff57\033\uff57\034\uff57\035"
        + "\uff57\036\uff57\037\uff57\040\uff57\041\uff57\044\uff57\050\uff57"
        + "\001\002\000\012\004\205\005\217\047\022\064\036\001"
        + "\002\000\012\004\uffc8\005\uffc8\047\uffc8\064\uffc8\001\002"
        + "\000\034\024\uff67\025\uff67\026\263\032\uff67\033\uff67\034"
        + "\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\044\uff67"
        + "\050\uff67\001\002\000\012\004\205\005\217\047\022\064"
        + "\036\001\002\000\006\024\234\050\026\001\002\000\012"
        + "\004\205\005\217\047\022\064\036\001\002\000\042\024"
        + "\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f"
        + "\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041"
        + "\uff5f\044\uff5f\050\uff5f\001\002\000\032\024\uff69\025\253"
        + "\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040"
        + "\uff69\041\uff69\044\uff69\050\uff69\001\002\000\012\004\205"
        + "\005\217\047\022\064\036\001\002\000\012\004\uffc7\005"
        + "\uffc7\047\uffc7\064\uffc7\001\002\000\036\024\uff65\025\uff65"
        + "\026\uff65\027\265\032\uff65\033\uff65\034\uff65\035\uff65\036"
        + "\uff65\037\uff65\040\uff65\041\uff65\044\uff65\050\uff65\001\002"
        + "\000\012\004\uffc6\005\uffc6\047\uffc6\064\uffc6\001\002\000"
        + "\012\004\205\005\217\047\022\064\036\001\002\000\036"
        + "\024\uff63\025\uff63\026\uff63\027\uff63\032\uff63\033\uff63\034"
        + "\uff63\035\uff63\036\uff63\037\uff63\040\uff63\041\uff63\044\uff63"
        + "\050\uff63\001\002\000\036\024\uff61\025\uff61\026\uff61\027"
        + "\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037\uff61"
        + "\040\uff61\041\uff61\044\uff61\050\uff61\001\002\000\030\024"
        + "\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55"
        + "\040\uff55\041\uff55\044\uff55\050\uff55\001\002\000\020\032"
        + "\161\033\157\034\160\035\164\036\165\037\163\050\026"
        + "\001\002\000\026\024\234\032\uff51\033\uff51\034\uff51\035"
        + "\uff51\036\uff51\037\uff51\040\uff51\041\uff51\050\026\001\002"
        + "\000\030\024\uff53\032\uff53\033\uff53\034\uff53\035\uff53\036"
        + "\uff53\037\uff53\040\uff53\041\uff53\044\uff53\050\uff53\001\002"
        + "\000\042\003\uff4c\006\uff4c\007\uff4c\010\uff4c\011\uff4c\013"
        + "\uff4c\015\uff4c\016\uff4c\017\uff4c\046\uff4c\052\uff4c\055\uff4c"
        + "\056\uff4c\057\uff4c\062\uff4c\064\uff4c\001\002\000\042\003"
        + "\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\013\uff4e\015\uff4e"
        + "\016\uff4e\017\uff4e\046\uff4e\052\uff4e\055\uff4e\056\uff4e\057"
        + "\uff4e\062\uff4e\064\uff4e\001\002\000\042\003\uffa5\006\uffa5"
        + "\007\uffa5\010\uffa5\011\uffa5\013\uffa5\015\uffa5\016\uffa5\017"
        + "\uffa5\046\uffa5\052\uffa5\055\uffa5\056\uffa5\057\uffa5\062\uffa5"
        + "\064\uffa5\001\002\000\020\004\205\005\217\014\232\042"
        + "\211\047\022\063\215\064\036\001\002\000\004\050\026"
        + "\001\002\000\004\044\030\001\002\000\032\006\uff7f\007"
        + "\uff7f\010\uff7f\011\uff7f\013\uff7f\046\uff7f\052\uff7f\055\uff7f"
        + "\056\uff7f\057\uff7f\062\uff7f\064\uff7f\001\002\000\016\004"
        + "\205\005\217\014\232\042\211\047\022\064\036\001\002"
        + "\000\004\046\056\001\002\000\036\006\uff8b\007\uff8b\010"
        + "\uff8b\011\uff8b\013\uff8b\046\uff8b\052\uff8b\053\311\054\312"
        + "\055\uff8b\056\uff8b\057\uff8b\062\uff8b\064\uff8b\001\002\000"
        + "\004\047\022\001\002\000\004\045\042\001\002\000\004"
        + "\047\uffd0\001\002\000\004\045\uffcf\001\002\000\032\006"
        + "\uff8c\007\uff8c\010\uff8c\011\uff8c\013\uff8c\046\uff8c\052\uff8c"
        + "\055\uff8c\056\uff8c\057\uff8c\062\uff8c\064\uff8c\001\002\000"
        + "\026\006\047\007\066\010\057\011\072\052\115\055\124"
        + "\056\125\057\114\062\122\064\036\001\002\000\004\046"
        + "\056\001\002\000\032\006\uff88\007\uff88\010\uff88\011\uff88"
        + "\013\uff88\046\uff88\052\uff88\055\uff88\056\uff88\057\uff88\062"
        + "\uff88\064\uff88\001\002\000\004\046\056\001\002\000\036"
        + "\006\uff89\007\uff89\010\uff89\011\uff89\013\uff89\046\uff89\052"
        + "\uff89\053\311\054\312\055\uff89\056\uff89\057\uff89\062\uff89"
        + "\064\uff89\001\002\000\032\006\uff8a\007\uff8a\010\uff8a\011"
        + "\uff8a\013\uff8a\046\uff8a\052\uff8a\055\uff8a\056\uff8a\057\uff8a"
        + "\062\uff8a\064\uff8a\001\002\000\020\032\161\033\157\034"
        + "\160\035\164\036\165\037\163\050\026\001\002\000\004"
        + "\045\042\001\002\000\030\006\047\007\066\010\057\011"
        + "\072\046\uff86\052\115\055\124\056\125\057\114\062\122"
        + "\064\036\001\002\000\004\046\uff87\001\002\000\016\004"
        + "\205\005\217\014\232\042\211\047\022\064\036\001\002"
        + "\000\020\032\161\033\157\034\160\035\164\036\165\037"
        + "\163\050\026\001\002\000\004\045\042\001\002\000\030"
        + "\006\047\007\066\010\057\011\072\046\056\052\115\055"
        + "\124\056\125\057\114\062\122\064\036\001\002\000\004"
        + "\046\056\001\002\000\032\006\uff84\007\uff84\010\uff84\011"
        + "\uff84\013\uff84\046\uff84\052\uff84\055\uff84\056\uff84\057\uff84"
        + "\062\uff84\064\uff84\001\002\000\032\006\uff85\007\uff85\010"
        + "\uff85\011\uff85\013\uff85\046\uff85\052\uff85\055\uff85\056\uff85"
        + "\057\uff85\062\uff85\064\uff85\001\002\000\030\006\047\007"
        + "\066\010\057\011\072\046\056\052\115\055\124\056\125"
        + "\057\114\062\122\064\036\001\002\000\004\046\056\001"
        + "\002\000\004\055\124\001\002\000\004\047\022\001\002"
        + "\000\016\004\205\005\217\014\232\042\211\047\022\064"
        + "\036\001\002\000\020\032\161\033\157\034\160\035\164"
        + "\036\165\037\163\050\026\001\002\000\004\044\030\001"
        + "\002\000\032\006\uff82\007\uff82\010\uff82\011\uff82\013\uff82"
        + "\046\uff82\052\uff82\055\uff82\056\uff82\057\uff82\062\uff82\064"
        + "\uff82\001\002\000\004\055\124\001\002\000\004\047\022"
        + "\001\002\000\016\004\205\005\217\014\232\042\211\047"
        + "\022\064\036\001\002\000\020\032\161\033\157\034\160"
        + "\035\164\036\165\037\163\050\026\001\002\000\004\044"
        + "\030\001\002\000\032\006\uff83\007\uff83\010\uff83\011\uff83"
        + "\013\uff83\046\uff83\052\uff83\055\uff83\056\uff83\057\uff83\062"
        + "\uff83\064\uff83\001\002\000\030\006\047\007\066\010\057"
        + "\011\072\046\056\052\115\055\124\056\125\057\114\062"
        + "\122\064\036\001\002\000\004\046\056\001\002\000\026"
        + "\003\uff92\006\uff92\007\uff92\010\uff92\011\uff92\015\uff92\016"
        + "\uff92\017\uff92\046\uff92\064\uff92\001\002\000\026\003\uff93"
        + "\006\uff93\007\uff93\010\uff93\011\uff93\015\uff93\016\uff93\017"
        + "\uff93\046\uff93\064\uff93\001\002\000\014\006\uffd9\007\uffd9"
        + "\010\uffd9\011\uffd9\064\uffd9\001\002\000\012\006\047\007"
        + "\066\010\057\011\072\001\002\000\004\050\uff8f\001\002"
        + "\000\006\050\uff8d\051\uff8d\001\002\000\042\003\uff4f\006"
        + "\uff4f\007\uff4f\010\uff4f\011\uff4f\013\uff4f\015\uff4f\016\uff4f"
        + "\017\uff4f\046\uff4f\052\uff4f\055\uff4f\056\uff4f\057\uff4f\062"
        + "\uff4f\064\uff4f\001\002\000\042\003\uff6e\006\uff6e\007\uff6e"
        + "\010\uff6e\011\uff6e\013\uff6e\015\uff6e\016\uff6e\017\uff6e\046"
        + "\uff6e\052\uff6e\055\uff6e\056\uff6e\057\uff6e\062\uff6e\064\uff6e"
        + "\001\002\000\026\024\234\032\uff51\033\uff51\034\uff51\035"
        + "\uff51\036\uff51\037\uff51\040\uff51\041\uff51\044\030\001\002"
        + "\000\042\003\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\013"
        + "\uff6b\015\uff6b\016\uff6b\017\uff6b\046\uff6b\052\uff6b\055\uff6b"
        + "\056\uff6b\057\uff6b\062\uff6b\064\uff6b\001\002\000\004\046"
        + "\uffb7\001\002\000\026\003\uffaa\006\uffaa\007\uffaa\010\uffaa"
        + "\011\uffaa\015\uffaa\016\uffaa\017\uffaa\046\uffaa\064\uffaa\001"
        + "\002\000\004\064\036\001\002\000\026\003\uffac\006\uffac"
        + "\007\uffac\010\uffac\011\uffac\015\uffac\016\uffac\017\uffac\046"
        + "\uffac\064\uffac\001\002\000\026\003\uffab\006\uffab\007\uffab"
        + "\010\uffab\011\uffab\015\uffab\016\uffab\017\uffab\046\uffab\064"
        + "\uffab\001\002\000\026\003\uffad\006\uffad\007\uffad\010\uffad"
        + "\011\uffad\015\uffad\016\uffad\017\uffad\046\uffad\064\uffad\001"
        + "\002\000\004\064\036\001\002\000\004\064\uffd4\001\002"
        + "\000\026\003\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\015"
        + "\uffa9\016\uffa9\017\uffa9\046\uffa9\064\uffa9\001\002\000\004"
        + "\064\036\001\002\000\004\043\075\001\002\000\004\020"
        + "\u0103\001\002\000\004\064\uffd7\001\002\000\004\064\036"
        + "\001\002\000\004\047\022\001\002\000\014\006\047\007"
        + "\066\010\057\011\072\050\026\001\002\000\026\003\uffa4"
        + "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4\016\uffa4\017"
        + "\uffa4\046\uffa4\064\uffa4\001\002\000\004\044\030\001\002"
        + "\000\004\050\026\001\002\000\004\044\030\001\002\000"
        + "\026\003\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\015\uffa2"
        + "\016\uffa2\017\uffa2\046\uffa2\064\uffa2\001\002\000\026\003"
        + "\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\015\uffa3\016\uffa3"
        + "\017\uffa3\046\uffa3\064\uffa3\001\002\000\004\047\022\001"
        + "\002\000\014\006\047\007\066\010\057\011\072\050\026"
        + "\001\002\000\004\045\042\001\002\000\004\050\026\001"
        + "\002\000\004\045\042\001\002\000\030\006\047\007\066"
        + "\010\057\011\072\046\056\052\115\055\124\056\125\057"
        + "\114\062\122\064\036\001\002\000\004\046\056\001\002"
        + "\000\026\003\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\015"
        + "\uff9f\016\uff9f\017\uff9f\046\uff9f\064\uff9f\001\002\000\026"
        + "\003\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\015\uff9b\016"
        + "\uff9b\017\uff9b\046\uff9b\064\uff9b\001\002\000\026\003\uff9c"
        + "\006\uff9c\007\uff9c\010\uff9c\011\uff9c\015\uff9c\016\uff9c\017"
        + "\uff9c\046\uff9c\064\uff9c\001\002\000\030\006\047\007\066"
        + "\010\057\011\072\046\056\052\115\055\124\056\125\057"
        + "\114\062\122\064\036\001\002\000\026\003\uff9e\006\uff9e"
        + "\007\uff9e\010\uff9e\011\uff9e\015\uff9e\016\uff9e\017\uff9e\046"
        + "\uff9e\064\uff9e\001\002\000\026\003\uffa8\006\uffa8\007\uffa8"
        + "\010\uffa8\011\uffa8\015\uffa8\016\uffa8\017\uffa8\046\uffa8\064"
        + "\uffa8\001\002\000\012\043\075\044\030\047\022\051\357"
        + "\001\002\000\020\004\205\005\217\014\232\042\211\047"
        + "\022\063\215\064\036\001\002\000\014\006\047\007\066"
        + "\010\057\011\072\050\026\001\002\000\004\064\036\001"
        + "\002\000\026\003\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6"
        + "\015\uffa6\016\uffa6\017\uffa6\046\uffa6\064\uffa6\001\002\000"
        + "\026\003\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\015\uffa7"
        + "\016\uffa7\017\uffa7\046\uffa7\064\uffa7\001\002\000\006\044"
        + "\030\051\357\001\002\000\004\045\042\001\002\000\004"
        + "\050\026\001\002\000\004\045\042\001\002\000\030\006"
        + "\047\007\066\010\057\011\072\013\u0127\052\115\055\124"
        + "\056\125\057\114\062\122\064\036\001\002\000\020\004"
        + "\205\005\217\014\232\042\211\047\022\063\215\064\036"
        + "\001\002\000\020\004\uff99\005\uff99\014\uff99\042\uff99\047"
        + "\uff99\063\uff99\064\uff99\001\002\000\020\004\uffd3\005\uffd3"
        + "\014\uffd3\042\uffd3\047\uffd3\063\uffd3\064\uffd3\001\002\000"
        + "\004\013\u0127\001\002\000\026\003\uffa1\006\uffa1\007\uffa1"
        + "\010\uffa1\011\uffa1\015\uffa1\016\uffa1\017\uffa1\046\uffa1\064"
        + "\uffa1\001\002\000\020\004\uff9a\005\uff9a\014\uff9a\042\uff9a"
        + "\047\uff9a\063\uff9a\064\uff9a\001\002\000\004\044\030\001"
        + "\002\000\026\003\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d"
        + "\015\uff9d\016\uff9d\017\uff9d\046\uff9d\064\uff9d\001\002\000"
        + "\004\046\056\001\002\000\026\003\uff98\006\uff98\007\uff98"
        + "\010\uff98\011\uff98\015\uff98\016\uff98\017\uff98\046\uff98\064"
        + "\uff98\001\002\000\030\006\047\007\066\010\057\011\072"
        + "\013\u0127\052\115\055\124\056\125\057\114\062\122\064"
        + "\036\001\002\000\026\003\uffa0\006\uffa0\007\uffa0\010\uffa0"
        + "\011\uffa0\015\uffa0\016\uffa0\017\uffa0\046\uffa0\064\uffa0\001"
        + "\002\000\004\044\030\001\002\000\004\046\uffb8\001\002"
        + "\000\010\002\uffbd\003\uffbd\021\uffbd\001\002\000\004\046"
        + "\uffb5\001\002\000\004\043\075\001\002\000\012\004\205"
        + "\005\217\047\022\064\036\001\002\000\006\024\234\044"
        + "\030\001\002\000\042\003\uff6c\006\uff6c\007\uff6c\010\uff6c"
        + "\011\uff6c\013\uff6c\015\uff6c\016\uff6c\017\uff6c\046\uff6c\052"
        + "\uff6c\055\uff6c\056\uff6c\057\uff6c\062\uff6c\064\uff6c\001\002"
        + "\000\012\004\uff6a\005\uff6a\047\uff6a\064\uff6a\001\002\000"
        + "\004\046\uffb9\001\002\000\004\046\uffb6\001\002\000\004"
        + "\046\uffba\001\002\000\012\004\205\005\217\047\022\064"
        + "\036\001\002\000\006\024\234\044\030\001\002\000\042"
        + "\003\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\013\uff6d\015"
        + "\uff6d\016\uff6d\017\uff6d\046\uff6d\052\uff6d\055\uff6d\056\uff6d"
        + "\057\uff6d\062\uff6d\064\uff6d\001\002\000\010\043\075\044"
        + "\030\051\357\001\002\000\020\004\205\005\217\014\232"
        + "\042\211\047\022\063\215\064\036\001\002\000\006\003"
        + "\037\045\042\001\002\000\010\002\uffbe\003\uffbe\021\uffbe"
        + "\001\002\000\012\002\ufffc\015\ufffc\016\ufffc\017\ufffc\001"
        + "\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u0142\000\016\004\006\005\015\006\005\015\003\016"
        + "\012\103\007\001\001\000\010\005\u0143\015\003\103\007"
        + "\001\001\000\002\001\001\000\004\100\032\001\001\000"
        + "\002\001\001\000\004\104\022\001\001\000\002\001\001"
        + "\000\002\001\001\000\010\005\020\015\003\103\007\001"
        + "\001\000\002\001\001\000\002\001\001\000\006\006\005"
        + "\016\016\001\001\000\010\005\017\015\003\103\007\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\107\023\001\001\000\004\105\026\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\106\030\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\101\034\001\001\000\002\001\001\000\012\002\043"
        + "\017\042\020\037\102\040\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\101\u0141\001\001"
        + "\000\002\001\001\000\002\001\001\000\040\003\064\006"
        + "\062\011\045\021\060\022\050\024\052\032\061\044\063"
        + "\057\051\076\057\101\070\110\053\111\047\112\067\113"
        + "\054\001\001\000\002\001\001\000\006\025\u0118\101\u013f"
        + "\001\001\000\002\001\001\000\006\061\u013c\101\u0134\001"
        + "\001\000\036\006\062\011\045\021\u013b\022\050\024\052"
        + "\032\061\044\063\057\051\076\057\101\070\110\053\111"
        + "\047\112\067\113\054\001\001\000\036\006\062\011\045"
        + "\021\u013a\022\050\024\052\032\061\044\063\057\051\076"
        + "\057\101\070\110\053\111\047\112\067\113\054\001\001"
        + "\000\036\006\062\011\045\021\u0139\022\050\024\052\032"
        + "\061\044\063\057\051\076\057\101\070\110\053\111\047"
        + "\112\067\113\054\001\001\000\006\061\u0135\101\u0134\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\036\006\062\011\045\021\u0133\022\050\024\052\032"
        + "\061\044\063\057\051\076\057\101\070\110\053\111\047"
        + "\112\067\113\054\001\001\000\004\003\u0132\001\001\000"
        + "\036\006\062\011\045\021\u0131\022\050\024\052\032\061"
        + "\044\063\057\051\076\057\101\070\110\053\111\047\112"
        + "\067\113\054\001\001\000\030\011\370\014\374\023\373"
        + "\024\371\026\372\030\367\101\377\110\075\111\077\112"
        + "\067\113\054\001\001\000\036\006\062\011\045\021\366"
        + "\022\050\024\052\032\061\044\063\057\051\076\057\101"
        + "\070\110\053\111\047\112\067\113\054\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\006\104\073\115\072\001\001\000\002\001\001"
        + "\000\054\007\235\010\227\042\230\043\226\060\363\062"
        + "\364\063\225\064\224\065\221\066\217\067\220\071\203"
        + "\072\211\073\207\074\206\075\205\077\362\101\223\104"
        + "\213\120\212\141\215\001\001\000\024\011\076\045\101"
        + "\046\103\047\100\105\102\110\075\111\077\112\067\113"
        + "\054\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\101\361\001\001\000\002\001\001\000\004\114\357\001"
        + "\001\000\002\001\001\000\004\002\352\001\001\000\004"
        + "\105\104\001\001\000\004\002\105\001\001\000\054\003"
        + "\130\011\112\026\122\050\126\053\120\054\131\055\115"
        + "\056\127\057\116\070\133\076\125\101\132\110\053\111"
        + "\047\112\067\113\054\122\111\123\110\126\107\127\106"
        + "\130\117\001\001\000\004\002\334\001\001\000\004\104"
        + "\325\001\001\000\006\052\304\104\303\001\001\000\004"
        + "\104\277\001\001\000\004\101\177\001\001\000\002\001"
        + "\001\000\002\001\001\000\052\011\112\026\122\050\126"
        + "\053\120\054\131\055\115\056\176\057\116\070\133\076"
        + "\125\101\132\110\053\111\047\112\067\113\054\122\111"
        + "\123\110\126\107\127\106\130\117\001\001\000\052\011"
        + "\112\026\122\050\126\053\120\054\131\055\115\056\175"
        + "\057\116\070\133\076\125\101\132\110\053\111\047\112"
        + "\067\113\054\122\111\123\110\126\107\127\106\130\117"
        + "\001\001\000\004\101\147\001\001\000\052\011\112\026"
        + "\122\050\126\053\120\054\131\055\115\056\146\057\116"
        + "\070\133\076\125\101\132\110\053\111\047\112\067\113"
        + "\054\122\111\123\110\126\107\127\106\130\117\001\001"
        + "\000\002\001\001\000\052\011\112\026\122\050\126\053"
        + "\120\054\131\055\115\056\145\057\116\070\133\076\125"
        + "\101\132\110\053\111\047\112\067\113\054\122\111\123"
        + "\110\126\107\127\106\130\117\001\001\000\002\001\001"
        + "\000\002\001\001\000\052\011\112\026\122\050\126\053"
        + "\120\054\131\055\115\056\144\057\116\070\133\076\125"
        + "\101\132\110\053\111\047\112\067\113\054\122\111\123"
        + "\110\126\107\127\106\130\117\001\001\000\052\011\112"
        + "\026\122\050\126\053\120\054\131\055\115\056\143\057"
        + "\116\070\133\076\125\101\132\110\053\111\047\112\067"
        + "\113\054\122\111\123\110\126\107\127\106\130\117\001"
        + "\001\000\004\003\142\001\001\000\002\001\001\000\052"
        + "\011\112\026\122\050\126\053\120\054\131\055\115\056"
        + "\141\057\116\070\133\076\125\101\132\110\053\111\047"
        + "\112\067\113\054\122\111\123\110\126\107\127\106\130"
        + "\117\001\001\000\006\012\135\115\072\001\001\000\052"
        + "\011\112\026\122\050\126\053\120\054\131\055\115\056"
        + "\134\057\116\070\133\076\125\101\132\110\053\111\047"
        + "\112\067\113\054\122\111\123\110\126\107\127\106\130"
        + "\117\001\001\000\002\001\001\000\004\106\140\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\115"
        + "\150\001\001\000\004\117\151\001\001\000\004\131\153"
        + "\001\001\000\002\001\001\000\004\101\155\001\001\000"
        + "\002\001\001\000\004\013\161\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\117\165\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\132\167\001\001\000\002\001\001\000\004\117"
        + "\170\001\001\000\004\002\171\001\001\000\054\003\173"
        + "\011\112\026\122\050\126\053\120\054\131\055\115\056"
        + "\172\057\116\070\133\076\125\101\132\110\053\111\047"
        + "\112\067\113\054\122\111\123\110\126\107\127\106\130"
        + "\117\001\001\000\004\003\174\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\115\200\001\001\000\052\007\201\010\227\042\230"
        + "\043\226\062\222\063\225\064\224\065\221\066\217\067"
        + "\220\071\203\072\211\073\207\074\206\075\205\077\202"
        + "\101\223\104\213\120\212\141\215\001\001\000\004\106"
        + "\276\001\001\000\002\001\001\000\006\013\241\106\275"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\140\246\001\001\000\002\001\001\000\004"
        + "\137\244\001\001\000\004\106\274\001\001\000\042\010"
        + "\227\062\272\063\225\064\224\065\221\066\217\067\220"
        + "\071\271\072\211\073\207\074\206\075\205\101\223\104"
        + "\213\120\237\141\215\001\001\000\002\001\001\000\030"
        + "\010\227\062\222\063\225\064\224\065\221\066\217\067"
        + "\220\075\270\101\223\104\213\120\237\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\012\267\001\001\000"
        + "\004\136\265\001\001\000\004\133\256\001\001\000\002"
        + "\001\001\000\004\135\261\001\001\000\004\134\251\001"
        + "\001\000\004\133\234\001\001\000\002\001\001\000\004"
        + "\106\232\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\050\007\235\010\227\042\240\043\226"
        + "\062\222\063\225\064\224\065\221\066\217\067\220\071"
        + "\236\072\211\073\207\074\206\075\205\101\223\104\213"
        + "\120\237\141\215\001\001\000\002\001\001\000\004\013"
        + "\241\001\001\000\002\001\001\000\002\001\001\000\040"
        + "\010\227\062\222\063\225\064\224\065\221\066\217\067"
        + "\220\072\242\073\207\074\206\075\205\101\223\104\213"
        + "\120\237\141\215\001\001\000\004\137\244\001\001\000"
        + "\002\001\001\000\036\010\227\062\222\063\225\064\224"
        + "\065\221\066\217\067\220\073\245\074\206\075\205\101"
        + "\223\104\213\120\237\141\215\001\001\000\004\140\246"
        + "\001\001\000\034\010\227\062\222\063\225\064\224\065"
        + "\221\066\217\067\220\074\250\075\205\101\223\104\213"
        + "\120\237\141\215\001\001\000\002\001\001\000\002\001"
        + "\001\000\020\010\227\064\253\065\221\066\217\067\220"
        + "\101\223\104\254\001\001\000\002\001\001\000\004\135"
        + "\261\001\001\000\024\010\227\062\255\063\225\064\224"
        + "\065\221\066\217\067\220\101\223\104\254\001\001\000"
        + "\006\105\257\133\256\001\001\000\022\010\227\063\260"
        + "\064\224\065\221\066\217\067\220\101\223\104\254\001"
        + "\001\000\002\001\001\000\004\134\251\001\001\000\016"
        + "\010\227\065\263\066\217\067\220\101\223\104\254\001"
        + "\001\000\002\001\001\000\004\136\265\001\001\000\002"
        + "\001\001\000\014\010\227\066\266\067\220\101\223\104"
        + "\254\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\006\013\241\105\273\001\001\000\006\105"
        + "\257\133\256\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\050\007\235\010"
        + "\227\042\300\043\226\062\222\063\225\064\224\065\221"
        + "\066\217\067\220\071\236\072\211\073\207\074\206\075"
        + "\205\101\223\104\213\120\237\141\215\001\001\000\004"
        + "\105\301\001\001\000\004\106\302\001\001\000\002\001"
        + "\001\000\042\010\227\062\222\063\225\064\224\065\221"
        + "\066\217\067\220\071\321\072\211\073\207\074\206\075"
        + "\205\101\223\104\213\120\237\141\215\001\001\000\004"
        + "\003\305\001\001\000\010\051\312\124\306\125\307\001"
        + "\001\000\006\052\316\104\303\001\001\000\004\002\313"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\052\011\112\026\122\050\126\053\120\054\131"
        + "\055\115\056\314\057\116\070\133\076\125\101\132\110"
        + "\053\111\047\112\067\113\054\122\111\123\110\126\107"
        + "\127\106\130\117\001\001\000\004\003\315\001\001\000"
        + "\002\001\001\000\004\003\317\001\001\000\010\051\320"
        + "\124\306\125\307\001\001\000\002\001\001\000\006\013"
        + "\241\105\322\001\001\000\004\002\323\001\001\000\052"
        + "\011\112\026\122\050\126\053\120\054\131\055\115\056"
        + "\324\057\116\070\133\076\125\101\132\110\053\111\047"
        + "\112\067\113\054\122\111\123\110\126\107\127\106\130"
        + "\117\001\001\000\002\001\001\000\042\010\227\062\222"
        + "\063\225\064\224\065\221\066\217\067\220\071\326\072"
        + "\211\073\207\074\206\075\205\101\223\104\213\120\237"
        + "\141\215\001\001\000\006\013\241\105\327\001\001\000"
        + "\004\002\330\001\001\000\054\003\332\011\112\026\122"
        + "\050\126\053\120\054\131\055\115\056\331\057\116\070"
        + "\133\076\125\101\132\110\053\111\047\112\067\113\054"
        + "\122\111\123\110\126\107\127\106\130\117\001\001\000"
        + "\004\003\333\001\001\000\002\001\001\000\002\001\001"
        + "\000\054\003\336\011\112\026\122\050\126\053\120\054"
        + "\131\055\115\056\335\057\116\070\133\076\125\101\132"
        + "\110\053\111\047\112\067\113\054\122\111\123\110\126"
        + "\107\127\106\130\117\001\001\000\004\003\344\001\001"
        + "\000\004\126\337\001\001\000\004\104\340\001\001\000"
        + "\042\010\227\062\222\063\225\064\224\065\221\066\217"
        + "\067\220\071\341\072\211\073\207\074\206\075\205\101"
        + "\223\104\213\120\237\141\215\001\001\000\006\013\241"
        + "\105\342\001\001\000\004\106\343\001\001\000\002\001"
        + "\001\000\004\126\345\001\001\000\004\104\346\001\001"
        + "\000\042\010\227\062\222\063\225\064\224\065\221\066"
        + "\217\067\220\071\347\072\211\073\207\074\206\075\205"
        + "\101\223\104\213\120\237\141\215\001\001\000\006\013"
        + "\241\105\350\001\001\000\004\106\351\001\001\000\002"
        + "\001\001\000\054\003\354\011\112\026\122\050\126\053"
        + "\120\054\131\055\115\056\353\057\116\070\133\076\125"
        + "\101\132\110\053\111\047\112\067\113\054\122\111\123"
        + "\110\126\107\127\106\130\117\001\001\000\004\003\355"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\020\011\076\046\360\047\100\110\075\111\077"
        + "\112\067\113\054\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\006\106\365"
        + "\133\256\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\006\025\u0118\101\u0119\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\101"
        + "\u010c\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\101\u0100\001\001\000\004\115\u0101\001\001\000\004\116"
        + "\u0103\001\001\000\002\001\001\000\004\101\u0104\001\001"
        + "\000\004\104\u0105\001\001\000\024\011\076\031\u0106\046"
        + "\u0108\047\100\105\u0107\110\075\111\077\112\067\113\054"
        + "\001\001\000\002\001\001\000\004\106\u010b\001\001\000"
        + "\004\105\u0109\001\001\000\004\106\u010a\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\104\u010d\001\001\000"
        + "\022\011\076\046\u010f\047\100\105\u010e\110\075\111\077"
        + "\112\067\113\054\001\001\000\004\002\u0116\001\001\000"
        + "\004\105\u0110\001\001\000\004\002\u0111\001\001\000\056"
        + "\003\u0114\011\112\026\122\034\u0113\050\126\053\120\054"
        + "\131\055\115\056\u0112\057\116\070\133\076\125\101\132"
        + "\110\053\111\047\112\067\113\054\122\111\123\110\126"
        + "\107\127\106\130\117\001\001\000\004\003\u0115\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\056\003\u0114\011\112\026\122\034\u0117\050\126\053\120"
        + "\054\131\055\115\056\u0112\057\116\070\133\076\125\101"
        + "\132\110\053\111\047\112\067\113\054\122\111\123\110"
        + "\126\107\127\106\130\117\001\001\000\002\001\001\000"
        + "\002\001\001\000\012\104\u011b\106\u011d\114\u011c\115\u011a"
        + "\001\001\000\044\007\u0130\010\227\062\222\063\225\064"
        + "\224\065\221\066\217\067\220\071\236\072\211\073\207"
        + "\074\206\075\205\101\223\104\213\120\237\141\215\001"
        + "\001\000\022\011\076\046\u0121\047\100\105\u0120\110\075"
        + "\111\077\112\067\113\054\001\001\000\006\025\u011e\101"
        + "\u011f\001\001\000\002\001\001\000\002\001\001\000\006"
        + "\106\u011d\114\u011c\001\001\000\004\002\u012e\001\001\000"
        + "\004\105\u0122\001\001\000\004\002\u0123\001\001\000\060"
        + "\011\112\026\122\033\u0128\037\u0124\050\126\053\120\054"
        + "\131\055\115\056\u0127\057\116\070\133\076\125\101\132"
        + "\110\053\111\047\112\067\113\054\121\u0125\122\111\123"
        + "\110\126\107\127\106\130\117\001\001\000\044\007\u012a"
        + "\010\227\062\222\063\225\064\224\065\221\066\217\067"
        + "\220\071\236\072\211\073\207\074\206\075\205\101\223"
        + "\104\213\120\237\141\215\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\121\u0129\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\041\u012b\106\u012c\001\001\000"
        + "\002\001\001\000\004\003\u012d\001\001\000\002\001\001"
        + "\000\060\011\112\026\122\033\u012f\037\u0124\050\126\053"
        + "\120\054\131\055\115\056\u0127\057\116\070\133\076\125"
        + "\101\132\110\053\111\047\112\067\113\054\121\u0125\122"
        + "\111\123\110\126\107\127\106\130\117\001\001\000\002"
        + "\001\001\000\004\106\276\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\115\u0138\001\001"
        + "\000\024\010\227\062\u0136\063\225\064\224\065\221\066"
        + "\217\067\220\101\223\104\254\001\001\000\006\106\u0137"
        + "\133\256\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\024"
        + "\010\227\062\u013d\063\225\064\224\065\221\066\217\067"
        + "\220\101\223\104\254\001\001\000\006\106\u013e\133\256"
        + "\001\001\000\002\001\001\000\010\106\u011d\114\u011c\115"
        + "\u0140\001\001\000\052\007\235\010\227\042\230\043\226"
        + "\062\222\063\225\064\224\065\221\066\217\067\220\071"
        + "\203\072\211\073\207\074\206\075\205\077\202\101\223"
        + "\104\213\120\212\141\215\001\001\000\006\002\043\020"
        + "\u0142\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private JTextPane panel;
    private Structure painting;

    public parser(Lexer lex, Structure paintText, JTextPane panelSalida) {
        super(lex);
        this.panel = panelSalida;
        this.painting = paintText;
    }

    public void syntax_error(Symbol cur_token) {
        String message = "Estructura invalida en posición " + cur_token.right
                + ", token: " + cur_token.value;
        System.out.println(message);
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$parser$actions {

        private final parser parser;

        /**
         * Constructor
         */
        CUP$parser$actions(parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
                int CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack CUP$parser$stack,
                int CUP$parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

            /* select the action based on the action number */
            switch (CUP$parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIO EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    String start_val = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIO ::= INICIO1 CLASE INICIO1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // INICIO ::= CLASE INICIO1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // INICIO ::= INICIO1 CLASE
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // INICIO ::= CLASE
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO", 2, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // INICIO1 ::= STR_IMPORT INICIO1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO1", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // INICIO1 ::= STR_IMPORT
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO1", 3, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // VISIBILIDAD ::= Publico
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // VISIBILIDAD ::= Protegido
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // VISIBILIDAD ::= Privado
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // DATO_PRIMITIVO ::= Cadena
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBrown(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // DATO_PRIMITIVO ::= OP_LOGIC
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO_PRIMITIVO", 5, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // NUMBERS ::= Entero
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCOrange(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMBERS", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // NUMBERS ::= Decimal
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCRed(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMBERS", 6, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // NAME_PRIMITIVO ::= NAME_ENTERO_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_PRIMITIVO", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // NAME_PRIMITIVO ::= NAME_DECIMAL_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_PRIMITIVO", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // NAME_PRIMITIVO ::= NAME_CADENA_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_PRIMITIVO", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // NAME_PRIMITIVO ::= NAME_BOOLEAN_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_PRIMITIVO", 7, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // ARIT_UNARIO ::= Add1
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_UNARIO", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // ARIT_UNARIO ::= Less1
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_UNARIO", 8, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // ARIT_RELACIONAL ::= Mayor
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_RELACIONAL", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // ARIT_RELACIONAL ::= Menor
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_RELACIONAL", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // ARIT_RELACIONAL ::= MayorIg
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_RELACIONAL", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // ARIT_RELACIONAL ::= MenorIg
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_RELACIONAL", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // ARIT_RELACIONAL ::= Igual
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_RELACIONAL", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // ARIT_RELACIONAL ::= Diferente
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ARIT_RELACIONAL", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // COR_ABIERTO ::= CorAbierto
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCorAbierto(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("COR_ABIERTO", 0, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // COR_CERRADO ::= CorCerrado
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCorCerrado(e, panel, false);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("COR_CERRADO", 1, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // CLASE_ID ::= Clase
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE_ID", 62, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // IDENTIFICADOR ::= Identificador
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlack(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR", 63, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // EXTIENDE ::= Extiende
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("EXTIENDE", 64, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // IMPORTAR_ID ::= Importar
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTAR_ID", 65, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // PAR_ABIERTO_ID ::= ParAbierto
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlack(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR_ABIERTO_ID", 66, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // PAR_CERRADO_ID ::= ParCerrado
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlack(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR_CERRADO_ID", 67, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // END_COM_ID ::= EndCom
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendEndCom(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("END_COM_ID", 68, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // CADENA_ID ::= Cadena
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBrown(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA_ID", 69, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // NAME_ENTERO_ID ::= NamEntero
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_ENTERO_ID", 70, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // NAME_DECIMAL_ID ::= NamDecimal
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_DECIMAL_ID", 71, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // NAME_BOOLEAN_ID ::= NamBoolean
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_BOOLEAN_ID", 72, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // NAME_CADENA_ID ::= NamCadena
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NAME_CADENA_ID", 73, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // COMA_ID ::= Coma
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlack(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("COMA_ID", 74, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // ASIGNACION_ID ::= Asignacion
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ID", 75, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // NUEVO_ID ::= Nuevo
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NUEVO_ID", 76, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // ENTERO_ID ::= Entero
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCOrange(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTERO_ID", 77, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // BOOLEAN_ID ::= Boolean
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCYellow(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_ID", 78, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // VACIO_ID ::= Vacio
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("VACIO_ID", 10, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // DEVOLVER_ID ::= Devolver
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DEVOLVER_ID", 79, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // IMPRIMIR_ID ::= Imprimir
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCPurple(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_ID", 80, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // SI_ID ::= Si_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("SI_ID", 81, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // SI_NOSI_ID ::= Si_NoSi_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("SI_NOSI_ID", 82, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // SINO_ID ::= SiNo_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO_ID", 83, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // MIENTRAS_ID ::= Mientras_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("MIENTRAS_ID", 84, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // HACER_ID ::= Hacer_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("HACER_ID", 85, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // DESDE_ID ::= Desde_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DESDE_ID", 86, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // HASTA_ID ::= Hasta_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("HASTA_ID", 87, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // INCREMENTO_ID ::= Incremento_SC
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendCBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_ID", 88, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // MAS_ID ::= Mas
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("MAS_ID", 89, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // MENOS_ID ::= Menos
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("MENOS_ID", 90, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // POR_ID ::= Por
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("POR_ID", 91, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // DIV_ID ::= Div
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_ID", 92, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // AND_ID ::= And
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("AND_ID", 93, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // OR_ID ::= Or
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OR_ID", 94, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // NOT_ID ::= Not
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    String e = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    painting.appendDarkBlue(e, panel);
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("NOT_ID", 95, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // STR_IMPORT ::= IMPORTAR_ID PAR_ABIERTO_ID CADENA_ID PAR_CERRADO_ID END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_IMPORT", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // STR_IMPORT ::= error
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    System.out.println("Error al declarar la importacion");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("STR_IMPORT", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // CLASE ::= VISIBILIDAD CLASE_ID IDENTIFICADOR CLASE1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE", 12, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // CLASE1 ::= CLASE2
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE1", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // CLASE1 ::= EXTIENDE IDENTIFICADOR CLASE2
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE1", 13, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // CLASE2 ::= COR_ABIERTO CUERPO_PRO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE2", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // CLASE2 ::= COR_ABIERTO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE2", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // CLASE2 ::= error
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    System.out.println("Error durante la construccion de la clase");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASE2", 14, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // CUERPO_PRO ::= ATRI_CLASE CUERPO_PRO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // CUERPO_PRO ::= DECLARACION CUERPO_PRO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // CUERPO_PRO ::= METODO CUERPO_PRO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // CUERPO_PRO ::= CONSTRUCTOR CUERPO_PRO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // CUERPO_PRO ::= ASIGNAR_VAL_VAR CUERPO_PRO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // CUERPO_PRO ::= ASIGNAR CUERPO_PRO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // CUERPO_PRO ::= ATRI_CLASE
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // CUERPO_PRO ::= DECLARACION
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // CUERPO_PRO ::= METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // CUERPO_PRO ::= CONSTRUCTOR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // CUERPO_PRO ::= ASIGNAR_VAL_VAR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // CUERPO_PRO ::= ASIGNAR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // CUERPO_PRO ::= error
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    System.out.println("Error en el cuerpo de la clase");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PRO", 15, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // ATRI_CLASE ::= VISIBILIDAD ATRI_CLASE1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRI_CLASE", 16, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // ATRI_CLASE1 ::= DECLARACION
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRI_CLASE1", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // ATRI_CLASE1 ::= INICIALIZAR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRI_CLASE1", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // ATRI_CLASE1 ::= INSTANCIAR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRI_CLASE1", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // ATRI_CLASE1 ::= error
                {
                    String RESULT = null;
                    int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                    System.out.println("Error en la visibilidad del objeto");
                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRI_CLASE1", 17, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // DECLARACION ::= NAME_PRIMITIVO DECLARACION1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION", 18, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // DECLARACION1 ::= IDENTIFICADOR COMA_ID DECLARACION1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION1", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // DECLARACION1 ::= IDENTIFICADOR END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION1", 19, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // INICIALIZAR ::= NAME_PRIMITIVO IDENTIFICADOR ASIGNACION_ID DATO_PRIMITIVO END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIALIZAR", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // INSTANCIAR ::= IDENTIFICADOR IDENTIFICADOR ASIGNACION_ID NUEVO_ID IDENTIFICADOR PAR_ABIERTO_ID INSTANCIAR1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIAR", 22, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // INSTANCIAR1 ::= PAR_CERRADO_ID END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIAR1", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // INSTANCIAR1 ::= PARAMETROS PAR_CERRADO_ID END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIAR1", 23, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // METODO ::= VISIBILIDAD NAME_PRIMITIVO IDENTIFICADOR PAR_ABIERTO_ID PARAMETROS PAR_CERRADO_ID COR_ABIERTO METODO_E
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // METODO ::= VISIBILIDAD NAME_PRIMITIVO IDENTIFICADOR PAR_ABIERTO_ID PAR_CERRADO_ID COR_ABIERTO METODO_E
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // METODO ::= VISIBILIDAD VACIO_ID IDENTIFICADOR PAR_ABIERTO_ID PARAMETROS PAR_CERRADO_ID COR_ABIERTO METODO_D
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // METODO ::= VISIBILIDAD VACIO_ID IDENTIFICADOR PAR_ABIERTO_ID PAR_CERRADO_ID COR_ABIERTO METODO_D
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO", 24, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // METODO_E ::= METODO_INICIO_C DATO_PRIMITIVO METODO_FIN
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO_E", 25, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // METODO_D ::= CUERPO_METODO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO_D", 26, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // METODO_D ::= COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO_D", 26, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // METODO_INICIO_C ::= CUERPO_METODO DEVOLVER_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO_INICIO_C", 29, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // METODO_INICIO_C ::= DEVOLVER_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO_INICIO_C", 29, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // METODO_FIN ::= END_COM_ID COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO_FIN", 31, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // CONCAT_CADENA ::= DATO_PRI_ID MAS_ID CONCAT_CADENA
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCAT_CADENA", 32, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // CONCAT_CADENA ::= DATO_PRI_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CONCAT_CADENA", 32, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // DATO_PRI_ID ::= DATO_PRIMITIVO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("DATO_PRI_ID", 33, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // CONSTRUCTOR ::= IDENTIFICADOR PAR_ABIERTO_ID CONSTRUCTOR1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR", 34, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // CONSTRUCTOR1 ::= PAR_CERRADO_ID COR_ABIERTO CUERPO_METODO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR1", 35, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // CONSTRUCTOR1 ::= PAR_CERRADO_ID COR_ABIERTO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR1", 35, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // CONSTRUCTOR1 ::= PARAMETROS PAR_CERRADO_ID COR_ABIERTO CUERPO_METODO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR1", 35, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // CONSTRUCTOR1 ::= PARAMETROS PAR_CERRADO_ID COR_ABIERTO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR1", 35, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // PARAMETROS ::= UN_PARAMETRO COMA_ID PARAMETROS
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 36, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // PARAMETROS ::= UN_PARAMETRO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 36, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // UN_PARAMETRO ::= NAME_PRIMITIVO IDENTIFICADOR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("UN_PARAMETRO", 37, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // IF_ELSE_IF ::= SI_ID IF_ELSE_IF_BODY COR_CERRADO IF_ELSE_IF1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_IF", 38, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // IF_ELSE_IF ::= SI_ID IF_ELSE_IF_BODY COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_IF", 38, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // IF_ELSE_IF1 ::= SI_NOSI_ID IF_ELSE_IF_BODY COR_CERRADO IF_ELSE_IF1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_IF1", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // IF_ELSE_IF1 ::= SI_NOSI_ID IF_ELSE_IF_BODY COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_IF1", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // IF_ELSE_IF1 ::= SINO_ID COR_ABIERTO CUERPO_METODO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_IF1", 39, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // IF_ELSE_IF_BODY ::= PAR_ABIERTO_ID OP_LOGIC PAR_CERRADO_ID COR_ABIERTO CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_IF_BODY", 40, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // IF_ELSE_IF_BODY ::= PAR_ABIERTO_ID OP_LOGIC PAR_CERRADO_ID COR_ABIERTO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE_IF_BODY", 40, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // WHILE_DO ::= MIENTRAS_ID PAR_ABIERTO_ID OP_LOGIC PAR_CERRADO_ID COR_ABIERTO CUERPO_METODO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_DO", 41, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // WHILE_DO ::= MIENTRAS_ID PAR_ABIERTO_ID OP_LOGIC PAR_CERRADO_ID COR_ABIERTO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_DO", 41, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // WHILE_DO ::= HACER_ID COR_ABIERTO CUERPO_METODO COR_CERRADO MIENTRAS_ID PAR_ABIERTO_ID OP_LOGIC PAR_CERRADO_ID END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_DO", 41, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // WHILE_DO ::= HACER_ID COR_ABIERTO COR_CERRADO MIENTRAS_ID PAR_ABIERTO_ID OP_LOGIC PAR_CERRADO_ID END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE_DO", 41, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // FOR_OP ::= DESDE_ID IDENTIFICADOR ASIGNACION_ID ENTERO_ID HASTA_ID IDENTIFICADOR ARIT_RELACIONAL ENTERO_ID INCREMENTO_ID ENTERO_ID COR_ABIERTO CUERPO_METODO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_OP", 42, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 12)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // FOR_OP ::= DESDE_ID IDENTIFICADOR ASIGNACION_ID ENTERO_ID HASTA_ID IDENTIFICADOR ARIT_RELACIONAL ENTERO_ID INCREMENTO_ID ENTERO_ID COR_ABIERTO COR_CERRADO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR_OP", 42, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 11)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // PRINT_TEXT ::= IMPRIMIR_ID PAR_ABIERTO_ID CONCAT_CADENA PAR_CERRADO_ID END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT_TEXT", 43, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // CUERPO_METODO ::= INICIALIZAR CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // CUERPO_METODO ::= IF_ELSE_IF CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // CUERPO_METODO ::= WHILE_DO CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // CUERPO_METODO ::= FOR_OP CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // CUERPO_METODO ::= PRINT_TEXT CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // CUERPO_METODO ::= ASIGNAR_VAL_VAR CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // CUERPO_METODO ::= ASIGNAR CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // CUERPO_METODO ::= OP_UNARIA CUERPO_METODO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // CUERPO_METODO ::= INICIALIZAR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // CUERPO_METODO ::= IF_ELSE_IF
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 141: // CUERPO_METODO ::= WHILE_DO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 142: // CUERPO_METODO ::= FOR_OP
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 143: // CUERPO_METODO ::= PRINT_TEXT
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 144: // CUERPO_METODO ::= ASIGNAR_VAL_VAR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 145: // CUERPO_METODO ::= ASIGNAR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 146: // CUERPO_METODO ::= OP_UNARIA
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO", 44, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 147: // ASIGNAR_VAL_VAR ::= IDENTIFICADOR ASIGNACION_ID ASIGNAR_VAL_VAR1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL_VAR", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 148: // ASIGNAR_VAL_VAR ::= NAME_DECIMAL_ID ASIGNAR_VAL_VAR2 OP_ARIT_DE END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL_VAR", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 149: // ASIGNAR_VAL_VAR ::= NAME_ENTERO_ID ASIGNAR_VAL_VAR2 OP_ARIT_DE END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL_VAR", 45, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 150: // ASIGNAR_VAL_VAR1 ::= OP_ARIT_DE END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL_VAR1", 46, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 151: // ASIGNAR_VAL_VAR2 ::= IDENTIFICADOR ASIGNACION_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL_VAR2", 47, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 152: // OP_ARIT_DE ::= OP_ARIT_DE MAS_ID OP_ARIT_2
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_DE", 48, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 153: // OP_ARIT_DE ::= OP_ARIT_2
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_DE", 48, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 154: // OP_ARIT_2 ::= OP_ARIT_2 MENOS_ID OP_ARIT_3
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_2", 49, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 155: // OP_ARIT_2 ::= OP_ARIT_3
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_2", 49, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 156: // OP_ARIT_3 ::= OP_ARIT_3 POR_ID OP_ARIT_4
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_3", 50, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 157: // OP_ARIT_3 ::= OP_ARIT_4
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_3", 50, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 158: // OP_ARIT_4 ::= OP_ARIT_4 DIV_ID OP_ARIT_6
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_4", 51, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 159: // OP_ARIT_4 ::= OP_ARIT_6
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_4", 51, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 160: // OP_ARIT_6 ::= OP_ARIT_5 ARIT_UNARIO
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_6", 52, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 161: // OP_ARIT_6 ::= OP_ARIT_5
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_6", 52, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 162: // OP_ARIT_5 ::= PAR_ABIERTO_ID OP_ARIT_DE PAR_CERRADO_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_5", 53, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 163: // OP_ARIT_5 ::= NUMBERS
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_5", 53, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 164: // OP_ARIT_5 ::= IDENTIFICADOR
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT_5", 53, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 165: // OP_UNARIA ::= IDENTIFICADOR ARIT_UNARIO END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_UNARIA", 54, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 166: // OP_LOGIC ::= OP_LOGIC ARIT_RELACIONAL OP_LOGIC1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC", 55, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 167: // OP_LOGIC ::= OP_LOGIC1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC", 55, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 168: // OP_LOGIC1 ::= OP_LOGIC1 AND_ID OP_LOGIC2
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC1", 56, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 169: // OP_LOGIC1 ::= OP_LOGIC2
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC1", 56, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 170: // OP_LOGIC2 ::= OP_LOGIC2 OR_ID OP_LOGIC3
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC2", 57, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 171: // OP_LOGIC2 ::= OP_LOGIC3
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC2", 57, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 172: // OP_LOGIC3 ::= NOT_ID OP_LOGIC4
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC3", 58, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 173: // OP_LOGIC3 ::= OP_LOGIC4
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC3", 58, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 174: // OP_LOGIC4 ::= PAR_ABIERTO_ID OP_LOGIC PAR_CERRADO_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC4", 59, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 175: // OP_LOGIC4 ::= BOOLEAN_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC4", 59, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 176: // OP_LOGIC4 ::= OP_ARIT_DE
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_LOGIC4", 59, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 177: // ASIGNAR ::= NAME_PRIMITIVO IDENTIFICADOR ASIGNACION_ID ASIGNAR1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR", 60, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 178: // ASIGNAR ::= IDENTIFICADOR ASIGNACION_ID ASIGNAR1
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR", 60, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 179: // ASIGNAR1 ::= OP_LOGIC END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR1", 61, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 180: // ASIGNAR1 ::= CONCAT_CADENA END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR1", 61, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 181: // ASIGNAR1 ::= BOOLEAN_ID END_COM_ID
                {
                    String RESULT = null;

                    CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR1", 61, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
                }
                return CUP$parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$parser$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$parser$do_action(
                int CUP$parser$act_num,
                java_cup.runtime.lr_parser CUP$parser$parser,
                java.util.Stack CUP$parser$stack,
                int CUP$parser$top)
                throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                    CUP$parser$act_num,
                    CUP$parser$parser,
                    CUP$parser$stack,
                    CUP$parser$top);
        }
    }

}
