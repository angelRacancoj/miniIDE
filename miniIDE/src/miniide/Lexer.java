/* The following code was generated by JFlex 1.6.1 */
package miniide;

import java_cup.runtime.*;
import javax.swing.JTextPane;
import miniide.frontEnd.structure.Structure;
import miniide.sym.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>/home/angel/NetBeansProjects/miniIDE/miniIDE/src/lexico.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\23\1\6\1\2\1\0\1\6\1\1\16\23\4\0\1\6\1\46"
            + "\1\21\1\0\1\7\1\0\1\50\1\0\1\55\1\56\1\10\1\42"
            + "\1\57\1\12\1\20\1\11\12\24\1\51\1\52\1\44\1\45\1\43"
            + "\2\0\1\70\1\22\1\72\1\73\1\65\2\22\1\71\1\61\3\22"
            + "\1\64\1\62\1\63\2\22\1\67\1\60\1\66\6\22\1\53\1\0"
            + "\1\54\1\0\1\25\1\0\1\27\1\35\1\32\1\31\1\14\1\26"
            + "\1\40\1\22\1\33\2\22\1\5\1\34\1\3\1\17\1\37\1\22"
            + "\1\16\1\30\1\15\1\4\1\36\1\22\1\41\2\22\1\0\1\47"
            + "\2\0\41\23\2\0\4\22\4\0\1\22\2\0\1\23\7\0\1\22"
            + "\4\0\1\22\5\0\27\22\1\0\37\22\1\0\u01ca\22\4\0\14\22"
            + "\16\0\5\22\7\0\1\22\1\0\1\22\21\0\160\23\5\22\1\0"
            + "\2\22\2\0\4\22\10\0\1\22\1\0\3\22\1\0\1\22\1\0"
            + "\24\22\1\0\123\22\1\0\213\22\1\0\5\23\2\0\236\22\11\0"
            + "\46\22\2\0\1\22\7\0\47\22\7\0\1\22\1\0\55\23\1\0"
            + "\1\23\1\0\2\23\1\0\2\23\1\0\1\23\10\0\33\22\5\0"
            + "\3\22\15\0\5\23\6\0\1\22\4\0\13\23\5\0\53\22\25\23"
            + "\12\24\4\0\2\22\1\23\143\22\1\0\1\22\10\23\1\0\6\23"
            + "\2\22\2\23\1\0\4\23\2\22\12\24\3\22\2\0\1\22\17\0"
            + "\1\23\1\22\1\23\36\22\33\23\2\0\131\22\13\23\1\22\16\0"
            + "\12\24\41\22\11\23\2\22\4\0\1\22\5\0\26\22\4\23\1\22"
            + "\11\23\1\22\3\23\1\22\5\23\22\0\31\22\3\23\104\0\1\22"
            + "\1\0\13\22\67\0\33\23\1\0\4\23\66\22\3\23\1\22\22\23"
            + "\1\22\7\23\12\22\2\23\2\0\12\24\1\0\7\22\1\0\7\22"
            + "\1\0\3\23\1\0\10\22\2\0\2\22\2\0\26\22\1\0\7\22"
            + "\1\0\1\22\3\0\4\22\2\0\1\23\1\22\7\23\2\0\2\23"
            + "\2\0\3\23\1\22\10\0\1\23\4\0\2\22\1\0\3\22\2\23"
            + "\2\0\12\24\4\22\7\0\1\22\5\0\3\23\1\0\6\22\4\0"
            + "\2\22\2\0\26\22\1\0\7\22\1\0\2\22\1\0\2\22\1\0"
            + "\2\22\2\0\1\23\1\0\5\23\4\0\2\23\2\0\3\23\3\0"
            + "\1\23\7\0\4\22\1\0\1\22\7\0\12\24\2\23\3\22\1\23"
            + "\13\0\3\23\1\0\11\22\1\0\3\22\1\0\26\22\1\0\7\22"
            + "\1\0\2\22\1\0\5\22\2\0\1\23\1\22\10\23\1\0\3\23"
            + "\1\0\3\23\2\0\1\22\17\0\2\22\2\23\2\0\12\24\1\0"
            + "\1\22\17\0\3\23\1\0\10\22\2\0\2\22\2\0\26\22\1\0"
            + "\7\22\1\0\2\22\1\0\5\22\2\0\1\23\1\22\7\23\2\0"
            + "\2\23\2\0\3\23\10\0\2\23\4\0\2\22\1\0\3\22\2\23"
            + "\2\0\12\24\1\0\1\22\20\0\1\23\1\22\1\0\6\22\3\0"
            + "\3\22\1\0\4\22\3\0\2\22\1\0\1\22\1\0\2\22\3\0"
            + "\2\22\3\0\3\22\3\0\14\22\4\0\5\23\3\0\3\23\1\0"
            + "\4\23\2\0\1\22\6\0\1\23\16\0\12\24\11\0\1\22\7\0"
            + "\3\23\1\0\10\22\1\0\3\22\1\0\27\22\1\0\12\22\1\0"
            + "\5\22\3\0\1\22\7\23\1\0\3\23\1\0\4\23\7\0\2\23"
            + "\1\0\2\22\6\0\2\22\2\23\2\0\12\24\22\0\2\23\1\0"
            + "\10\22\1\0\3\22\1\0\27\22\1\0\12\22\1\0\5\22\2\0"
            + "\1\23\1\22\7\23\1\0\3\23\1\0\4\23\7\0\2\23\7\0"
            + "\1\22\1\0\2\22\2\23\2\0\12\24\1\0\2\22\17\0\2\23"
            + "\1\0\10\22\1\0\3\22\1\0\51\22\2\0\1\22\7\23\1\0"
            + "\3\23\1\0\4\23\1\22\10\0\1\23\10\0\2\22\2\23\2\0"
            + "\12\24\12\0\6\22\2\0\2\23\1\0\22\22\3\0\30\22\1\0"
            + "\11\22\1\0\1\22\2\0\7\22\3\0\1\23\4\0\6\23\1\0"
            + "\1\23\1\0\10\23\6\0\12\13\2\0\2\23\15\0\60\22\1\23"
            + "\2\22\7\23\4\0\10\22\10\23\1\0\12\24\47\0\2\22\1\0"
            + "\1\22\2\0\2\22\1\0\1\22\2\0\1\22\6\0\4\22\1\0"
            + "\7\22\1\0\3\22\1\0\1\22\1\0\1\22\2\0\2\22\1\0"
            + "\4\22\1\23\2\22\6\23\1\0\2\23\1\22\2\0\5\22\1\0"
            + "\1\22\1\0\6\23\2\0\12\24\2\0\4\22\40\0\1\22\27\0"
            + "\2\23\6\0\12\24\13\0\1\23\1\0\1\23\1\0\1\23\4\0"
            + "\2\23\10\22\1\0\44\22\4\0\24\23\1\0\2\23\5\22\13\23"
            + "\1\0\44\23\11\0\1\23\71\0\53\22\24\23\1\22\12\24\6\0"
            + "\6\22\4\23\4\22\3\23\1\22\3\23\2\22\7\23\3\22\4\23"
            + "\15\22\14\23\1\22\1\23\12\24\4\23\2\0\46\22\1\0\1\22"
            + "\5\0\1\22\2\0\53\22\1\0\u014d\22\1\0\4\22\2\0\7\22"
            + "\1\0\1\22\1\0\4\22\2\0\51\22\1\0\4\22\2\0\41\22"
            + "\1\0\4\22\2\0\7\22\1\0\1\22\1\0\4\22\2\0\17\22"
            + "\1\0\71\22\1\0\4\22\2\0\103\22\2\0\3\23\40\0\20\22"
            + "\20\0\125\22\14\0\u026c\22\2\0\21\22\1\0\32\22\5\0\113\22"
            + "\3\0\3\22\17\0\15\22\1\0\4\22\3\23\13\0\22\22\3\23"
            + "\13\0\22\22\2\23\14\0\15\22\1\0\3\22\1\0\2\23\14\0"
            + "\64\22\40\23\3\0\1\22\3\0\2\22\1\23\2\0\12\24\41\0"
            + "\3\23\2\0\12\24\6\0\130\22\10\0\51\22\1\23\1\22\5\0"
            + "\106\22\12\0\35\22\3\0\14\23\4\0\14\23\12\0\12\24\36\22"
            + "\2\0\5\22\13\0\54\22\4\0\21\23\7\22\2\23\6\0\12\24"
            + "\46\0\27\22\5\23\4\0\65\22\12\23\1\0\35\23\2\0\1\23"
            + "\12\24\6\0\12\24\15\0\1\22\130\0\5\23\57\22\21\23\7\22"
            + "\4\0\12\24\21\0\11\23\14\0\3\23\36\22\15\23\2\22\12\24"
            + "\54\22\16\23\14\0\44\22\24\23\10\0\12\24\3\0\3\22\12\24"
            + "\44\22\122\0\3\23\1\0\25\23\4\22\1\23\4\22\3\23\2\22"
            + "\11\0\300\22\47\23\25\0\4\23\u0116\22\2\0\6\22\2\0\46\22"
            + "\2\0\6\22\2\0\10\22\1\0\1\22\1\0\1\22\1\0\1\22"
            + "\1\0\37\22\2\0\65\22\1\0\7\22\1\0\1\22\3\0\3\22"
            + "\1\0\7\22\3\0\4\22\2\0\6\22\4\0\15\22\5\0\3\22"
            + "\1\0\7\22\16\0\5\23\32\0\5\23\20\0\2\22\23\0\1\22"
            + "\13\0\5\23\5\0\6\23\1\0\1\22\15\0\1\22\20\0\15\22"
            + "\3\0\33\22\25\0\15\23\4\0\1\23\3\0\14\23\21\0\1\22"
            + "\4\0\1\22\2\0\12\22\1\0\1\22\3\0\5\22\6\0\1\22"
            + "\1\0\1\22\1\0\1\22\1\0\4\22\1\0\13\22\2\0\4\22"
            + "\5\0\5\22\4\0\1\22\21\0\51\22\u0a77\0\57\22\1\0\57\22"
            + "\1\0\205\22\6\0\4\22\3\23\2\22\14\0\46\22\1\0\1\22"
            + "\5\0\1\22\2\0\70\22\7\0\1\22\17\0\1\23\27\22\11\0"
            + "\7\22\1\0\7\22\1\0\7\22\1\0\7\22\1\0\7\22\1\0"
            + "\7\22\1\0\7\22\1\0\7\22\1\0\40\23\57\0\1\22\u01d5\0"
            + "\3\22\31\0\11\22\6\23\1\0\5\22\2\0\5\22\4\0\126\22"
            + "\2\0\2\23\2\0\3\22\1\0\132\22\1\0\4\22\5\0\51\22"
            + "\3\0\136\22\21\0\33\22\65\0\20\22\u0200\0\u19b6\22\112\0\u51cd\22"
            + "\63\0\u048d\22\103\0\56\22\2\0\u010d\22\3\0\20\22\12\24\2\22"
            + "\24\0\57\22\1\23\4\0\12\23\1\0\31\22\7\0\1\23\120\22"
            + "\2\23\45\0\11\22\2\0\147\22\2\0\4\22\1\0\4\22\14\0"
            + "\13\22\115\0\12\22\1\23\3\22\1\23\4\22\1\23\27\22\5\23"
            + "\20\0\1\22\7\0\64\22\14\0\2\23\62\22\21\23\13\0\12\24"
            + "\6\0\22\23\6\22\3\0\1\22\4\0\12\24\34\22\10\23\2\0"
            + "\27\22\15\23\14\0\35\22\3\0\4\23\57\22\16\23\16\0\1\22"
            + "\12\24\26\0\12\13\6\0\51\22\16\23\11\0\3\22\1\23\10\22"
            + "\2\23\2\0\12\24\6\0\27\22\3\0\1\22\1\23\4\0\60\22"
            + "\1\23\1\22\3\23\2\22\2\23\5\22\2\23\1\22\1\23\1\22"
            + "\30\0\3\22\2\0\13\22\5\23\2\0\3\22\2\23\12\0\6\22"
            + "\2\0\6\22\2\0\6\22\11\0\7\22\1\0\7\22\221\0\43\22"
            + "\10\23\1\0\2\23\2\0\12\24\6\0\u2ba4\22\14\0\27\22\4\0"
            + "\61\22\u2104\0\u016e\22\2\0\152\22\46\0\7\22\14\0\5\22\5\0"
            + "\1\22\1\23\12\22\1\0\15\22\1\0\5\22\1\0\1\22\1\0"
            + "\2\22\1\0\2\22\1\0\154\22\41\0\u016b\22\22\0\100\22\2\0"
            + "\66\22\50\0\15\22\3\0\20\23\20\0\7\23\14\0\2\22\30\0"
            + "\3\22\31\0\1\22\6\0\5\22\1\0\207\22\2\0\1\23\4\0"
            + "\1\22\13\0\12\24\7\0\32\22\4\0\1\22\1\0\32\22\13\0"
            + "\131\22\3\0\6\22\2\0\6\22\2\0\6\22\2\0\3\22\3\0"
            + "\2\22\3\0\2\22\22\0\3\23\4\0\14\22\1\0\32\22\1\0"
            + "\23\22\1\0\2\22\1\0\17\22\2\0\16\22\42\0\173\22\105\0"
            + "\65\22\210\0\1\23\202\0\35\22\3\0\61\22\57\0\37\22\21\0"
            + "\33\22\65\0\36\22\2\0\44\22\4\0\10\22\1\0\5\22\52\0"
            + "\236\22\2\0\12\24\u0356\0\6\22\2\0\1\22\1\0\54\22\1\0"
            + "\2\22\3\0\1\22\2\0\27\22\252\0\26\22\12\0\32\22\106\0"
            + "\70\22\6\0\2\22\100\0\1\22\3\23\1\0\2\23\5\0\4\23"
            + "\4\22\1\0\3\22\1\0\33\22\4\0\3\23\4\0\1\23\40\0"
            + "\35\22\203\0\66\22\12\0\26\22\12\0\23\22\215\0\111\22\u03b7\0"
            + "\3\23\65\22\17\23\37\0\12\24\20\0\3\23\55\22\13\23\2\0"
            + "\1\23\22\0\31\22\7\0\12\24\6\0\3\23\44\22\16\23\1\0"
            + "\12\24\100\0\3\23\60\22\16\23\4\22\13\0\12\24\u0116\0\12\13"
            + "\u01d6\0\12\13\u0176\0\12\13\46\0\53\22\15\23\10\0\12\24\u0216\0"
            + "\12\13\u0716\0\u036f\22\221\0\143\22\u0b9d\0\u042f\22\u33d1\0\u0239\22\47\0"
            + "\12\13\346\0\12\13\u03a6\0\105\22\13\0\1\22\56\23\20\0\4\23"
            + "\15\22\u4060\0\2\22\u2163\0\5\23\3\0\26\23\2\0\7\23\36\0"
            + "\4\23\224\0\3\23\u01bb\0\125\22\1\0\107\22\1\0\2\22\2\0"
            + "\1\22\2\0\2\22\2\0\4\22\1\0\14\22\1\0\1\22\1\0"
            + "\7\22\1\0\101\22\1\0\4\22\2\0\10\22\1\0\7\22\1\0"
            + "\34\22\1\0\4\22\1\0\5\22\1\0\1\22\3\0\7\22\1\0"
            + "\u0154\22\2\0\31\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0"
            + "\37\22\1\0\31\22\1\0\37\22\1\0\31\22\1\0\37\22\1\0"
            + "\31\22\1\0\10\22\2\0\62\24\u1600\0\4\22\1\0\33\22\1\0"
            + "\2\22\1\0\1\22\2\0\1\22\1\0\12\22\1\0\4\22\1\0"
            + "\1\22\1\0\1\22\6\0\1\22\4\0\1\22\1\0\1\22\1\0"
            + "\1\22\1\0\3\22\1\0\2\22\1\0\1\22\2\0\1\22\1\0"
            + "\1\22\1\0\1\22\1\0\1\22\1\0\1\22\1\0\2\22\1\0"
            + "\1\22\2\0\4\22\1\0\7\22\1\0\4\22\1\0\4\22\1\0"
            + "\1\22\1\0\12\22\1\0\21\22\5\0\3\22\1\0\5\22\1\0"
            + "\21\22\u1144\0\ua6d7\22\51\0\u1035\22\13\0\336\22\u3fe2\0\u021e\22\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
            + "\1\23\36\0\140\23\200\0\360\23\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\1\0\1\1\2\2\3\3\1\4\1\5\1\6\1\7"
            + "\2\3\1\1\7\3\1\10\1\11\1\12\5\1\1\13"
            + "\1\14\1\15\1\16\1\17\1\20\6\3\1\0\1\21"
            + "\1\22\3\3\1\0\11\3\1\23\1\24\1\25\1\26"
            + "\1\27\1\30\1\31\1\32\1\33\1\34\5\3\1\0"
            + "\2\21\3\3\1\35\23\3\1\0\2\3\1\36\14\3"
            + "\1\37\5\3\1\40\4\3\1\41\4\3\1\42\6\3"
            + "\1\43\1\44\1\45\1\46\3\3\1\47\11\3\1\0"
            + "\1\3\1\50\3\3\1\51\1\52\1\3\1\53\1\54"
            + "\2\3\1\55\1\56\1\57\1\60\1\61\2\3\1\62"
            + "\1\63\1\3\1\64";

    private static int[] zzUnpackAction() {
        int[] result = new int[178];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\74\0\170\0\74\0\264\0\360\0\u012c\0\74"
            + "\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"
            + "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"
            + "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\74\0\74\0\74"
            + "\0\74\0\74\0\74\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"
            + "\0\u0780\0\u07bc\0\u07f8\0\74\0\u0834\0\u0870\0\u08ac\0\u08e8"
            + "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"
            + "\0\u0b04\0\74\0\74\0\74\0\74\0\74\0\74\0\74"
            + "\0\74\0\74\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"
            + "\0\u0ca8\0\u0ce4\0\74\0\u0d20\0\u0d5c\0\u0d98\0\74\0\u0dd4"
            + "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"
            + "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"
            + "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\360\0\u12fc\0\u1338"
            + "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"
            + "\0\u1554\0\u1590\0\360\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"
            + "\0\360\0\u16f8\0\u1734\0\u1770\0\u17ac\0\360\0\u17e8\0\u1824"
            + "\0\u1860\0\u189c\0\360\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"
            + "\0\u1a04\0\360\0\360\0\360\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"
            + "\0\360\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"
            + "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\360\0\u1dc4\0\u1e00\0\u1e3c"
            + "\0\360\0\360\0\u1e78\0\360\0\360\0\u1eb4\0\u1ef0\0\u1d4c"
            + "\0\360\0\360\0\360\0\360\0\u1f2c\0\u1f68\0\360\0\360"
            + "\0\u1fa4\0\360";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[178];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\2\1\3\1\4\1\5\2\6\1\4\1\7\1\10"
            + "\1\11\1\12\1\13\1\14\1\15\2\6\1\2\1\16"
            + "\1\6\1\2\1\13\1\6\1\17\2\6\1\20\1\21"
            + "\1\22\1\6\1\23\1\24\1\25\2\6\1\26\1\27"
            + "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"
            + "\1\40\1\41\1\42\1\43\1\44\1\45\2\6\1\46"
            + "\4\6\1\47\1\6\1\50\76\0\1\4\74\0\1\6"
            + "\1\51\1\6\1\0\1\6\2\0\1\6\1\0\4\6"
            + "\2\0\20\6\16\0\14\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\20\6\16\0\14\6"
            + "\3\0\3\6\1\0\1\6\1\52\1\0\1\6\1\0"
            + "\4\6\2\0\20\6\16\0\14\6\11\0\1\53\74\0"
            + "\1\54\1\13\10\0\1\13\62\0\1\13\10\0\1\13"
            + "\52\0\1\55\2\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\17\6\1\56\16\0\14\6\3\0\3\6"
            + "\1\0\1\6\2\0\1\6\1\0\2\6\1\57\1\6"
            + "\2\0\20\6\16\0\14\6\10\60\1\0\63\60\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\5\6\1\61\12\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\1\62\3\6\2\0\20\6"
            + "\16\0\14\6\3\0\2\6\1\63\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\5\6\1\64\12\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\12\6\1\65\5\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\3\6\1\66"
            + "\2\0\20\6\16\0\14\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\5\6\1\67\12\6"
            + "\16\0\14\6\3\0\1\6\1\70\1\6\1\0\1\6"
            + "\2\0\1\6\1\0\2\6\1\71\1\6\2\0\20\6"
            + "\16\0\14\6\42\0\1\72\76\0\1\73\73\0\1\74"
            + "\73\0\1\75\1\76\73\0\1\77\74\0\1\100\74\0"
            + "\1\101\70\0\1\102\31\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\20\6\16\0\1\6\1\103"
            + "\12\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\20\6\16\0\2\6\1\104\11\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\20\6\16\0\1\6\1\105\12\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\20\6\16\0"
            + "\10\6\1\106\3\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\20\6\16\0\5\6\1\107"
            + "\6\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\1\110\3\6\2\0\20\6\16\0\14\6\10\111\1\0"
            + "\63\111\1\53\1\112\1\113\71\53\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\1\6\1\114\2\6\2\0"
            + "\20\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\1\6\1\115\2\6\2\0\20\6\16\0"
            + "\14\6\3\0\1\6\1\116\1\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\20\6\16\0\14\6\21\60"
            + "\1\117\52\60\3\0\2\6\1\120\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\20\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\10\6\1\121\3\6\1\122\3\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\5\6\1\123\12\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\7\6\1\124"
            + "\10\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\15\6\1\125\2\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\3\6\1\126\2\0\20\6\16\0\14\6\3\0\3\6"
            + "\1\0\1\6\2\0\1\6\1\0\4\6\2\0\10\6"
            + "\1\127\7\6\16\0\14\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\13\6\1\130\4\6"
            + "\16\0\14\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\3\6\1\131\2\0\11\6\1\132\6\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\3\6\1\133\14\6\16\0\2\6\1\134"
            + "\11\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\20\6\16\0\12\6\1\135\1\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\20\6\16\0\5\6\1\136\6\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\20\6\16\0"
            + "\1\137\11\6\1\140\1\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\20\6\16\0\1\141"
            + "\13\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\14\6\1\142\3\6\16\0\14\6\10\111"
            + "\1\143\63\111\2\0\1\113\74\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\1\144\3\6\2\0\20\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\11\6\1\145\6\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\1\146\3\6"
            + "\2\0\20\6\16\0\14\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\6\6\1\116\11\6"
            + "\16\0\14\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\11\6\1\147\6\6\16\0\14\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\3\6"
            + "\1\150\2\0\20\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\6\6\1\151"
            + "\11\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\1\152\3\6\2\0\20\6\16\0\14\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\2\6"
            + "\1\153\1\154\2\0\20\6\16\0\14\6\3\0\2\6"
            + "\1\155\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\20\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\11\6\1\156\6\6\16\0"
            + "\14\6\3\0\2\6\1\157\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\20\6\16\0\14\6\3\0\3\6"
            + "\1\0\1\6\2\0\1\6\1\0\1\6\1\160\2\6"
            + "\2\0\20\6\16\0\14\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\14\6\1\161\3\6"
            + "\16\0\14\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\20\6\16\0\2\6\1\162\11\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\4\6"
            + "\2\0\20\6\16\0\3\6\1\163\10\6\3\0\3\6"
            + "\1\0\1\6\2\0\1\6\1\0\4\6\2\0\20\6"
            + "\16\0\7\6\1\164\4\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\20\6\16\0\2\6"
            + "\1\165\11\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\20\6\16\0\6\6\1\166\5\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\4\6"
            + "\2\0\20\6\16\0\5\6\1\167\6\6\3\0\3\6"
            + "\1\0\1\6\2\0\1\6\1\0\4\6\2\0\20\6"
            + "\16\0\13\6\1\170\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\3\6\1\171\2\0\20\6\16\0\14\6"
            + "\7\111\1\113\1\143\63\111\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\2\6\1\172\1\6\2\0\20\6"
            + "\16\0\14\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\1\173\3\6\2\0\20\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\12\6\1\174\5\6\16\0\14\6\3\0\2\6\1\175"
            + "\1\0\1\6\2\0\1\6\1\0\4\6\2\0\20\6"
            + "\16\0\14\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\1\176\3\6\2\0\20\6\16\0\14\6\3\0"
            + "\1\177\2\6\1\0\1\6\2\0\1\6\1\0\4\6"
            + "\2\0\20\6\16\0\14\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\11\6\1\200\6\6"
            + "\16\0\14\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\2\6\1\201\1\6\2\0\20\6\16\0\14\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\1\202"
            + "\3\6\2\0\20\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\3\6\1\203\2\0\20\6"
            + "\16\0\14\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\11\6\1\204\6\6\16\0\14\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\1\205"
            + "\3\6\2\0\20\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\5\6\1\206"
            + "\12\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\20\6\16\0\3\6\1\207"
            + "\10\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\20\6\16\0\5\6\1\210\6\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\20\6\16\0\6\6\1\211\5\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\20\6\16\0"
            + "\10\6\1\212\3\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\20\6\16\0\7\6\1\213"
            + "\4\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\20\6\16\0\5\6\1\214\6\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\3\6\1\215"
            + "\2\0\20\6\16\0\14\6\3\0\1\216\2\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\20\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\5\6\1\217\12\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\14\6\1\220\3\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\5\6\1\221"
            + "\12\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\12\6\1\222\5\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\1\6\1\223\2\6\2\0\20\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\5\6\1\224\12\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\10\6\1\225"
            + "\7\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\16\6\1\226\1\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\7\6\1\227\10\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\20\6\16\0\1\230\13\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\20\6\16\0\4\6"
            + "\1\231\7\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\20\6\16\0\7\6\1\232\4\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\4\6"
            + "\1\233\1\0\20\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\7\6\1\234"
            + "\10\6\16\0\14\6\3\0\2\6\1\235\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\20\6\16\0\14\6"
            + "\3\0\3\6\1\0\1\6\2\0\1\6\1\0\1\236"
            + "\3\6\2\0\20\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\4\6\2\0\11\6\1\237"
            + "\6\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\5\6\1\240\12\6\16\0"
            + "\14\6\3\0\1\241\2\6\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\20\6\16\0\14\6\3\0\3\6"
            + "\1\0\1\6\2\0\1\6\1\0\3\6\1\242\2\0"
            + "\20\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\11\6\1\243\6\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\3\6\1\244\2\0\20\6\16\0\14\6\3\0\3\6"
            + "\1\0\1\6\2\0\1\6\1\0\4\6\2\0\20\6"
            + "\16\0\1\6\1\245\12\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\4\6\2\0\20\6\16\0\5\6"
            + "\1\246\6\6\3\0\3\6\1\0\1\6\2\0\1\6"
            + "\1\0\4\6\2\0\20\6\16\0\10\6\1\247\3\6"
            + "\13\0\1\250\10\0\1\250\52\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\1\251\3\6\2\0\20\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\2\6\1\252\1\6\2\0\20\6\16\0\14\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\2\6\1\253"
            + "\1\6\2\0\20\6\16\0\14\6\3\0\3\6\1\0"
            + "\1\6\2\0\1\6\1\0\2\6\1\254\1\6\2\0"
            + "\20\6\16\0\14\6\3\0\3\6\1\0\1\6\2\0"
            + "\1\6\1\0\4\6\2\0\7\6\1\255\10\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\20\6\16\0\2\6\1\256\11\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\20\6\16\0\1\257\13\6\3\0\3\6\1\0\1\6"
            + "\2\0\1\6\1\0\3\6\1\260\2\0\20\6\16\0"
            + "\14\6\3\0\3\6\1\0\1\6\2\0\1\6\1\0"
            + "\4\6\2\0\20\6\16\0\6\6\1\261\5\6\3\0"
            + "\3\6\1\0\1\6\2\0\1\6\1\0\4\6\2\0"
            + "\20\6\16\0\3\6\1\262\10\6";

    private static int[] zzUnpackTrans() {
        int[] result = new int[8160];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\1\0\1\11\1\1\1\11\3\1\1\11\25\1\6\11"
            + "\6\1\1\0\1\1\1\11\3\1\1\0\11\1\11\11"
            + "\6\1\1\0\1\1\1\11\3\1\1\11\23\1\1\0"
            + "\67\1\1\0\27\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[178];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    private JTextPane panel;
    private Structure painting;
    StringBuilder string = new StringBuilder();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }

    private void error(String message) {
        System.out.println("Error en linea line " + (yyline + 1) + ", columna " + (yycolumn + 1) + " : " + message);
    }

    public Lexer(java.io.Reader in, JTextPane panelSalida, Structure paintText) {
        this.zzReader = in;
        this.panel = panelSalida;
        this.painting = paintText;
    }

    private void imprimirToken(String textSalida) {
        System.out.println("Leido: >> " + textSalida + " <<");
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 2918) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return symbol(sym.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        error("Simbolo invalido <" + yytext() + ">");
                    }
                    case 53:
                        break;
                    case 2: {
                        /*Nothing to do*/
                    }
                    case 54:
                        break;
                    case 3: {
                        imprimirToken(yytext());
                        return symbol(sym.Identificador, yytext());
                    }
                    case 55:
                        break;
                    case 4: {
                        imprimirToken(yytext());
                        return symbol(sym.Por, yytext());
                    }
                    case 56:
                        break;
                    case 5: {
                        imprimirToken(yytext());
                        return symbol(sym.Div, yytext());
                    }
                    case 57:
                        break;
                    case 6: {
                        imprimirToken(yytext());
                        return symbol(sym.Menos, yytext());
                    }
                    case 58:
                        break;
                    case 7: {
                        imprimirToken(yytext());
                        return symbol(sym.Entero, yytext());
                    }
                    case 59:
                        break;
                    case 8: {
                        imprimirToken(yytext());
                        return symbol(sym.Mas, yytext());
                    }
                    case 60:
                        break;
                    case 9: {
                        imprimirToken(yytext());
                        return symbol(sym.Mayor, yytext());
                    }
                    case 61:
                        break;
                    case 10: {
                        imprimirToken(yytext());
                        return symbol(sym.Menor, yytext());
                    }
                    case 62:
                        break;
                    case 11: {
                        imprimirToken(yytext());
                        return symbol(sym.EndCom, yytext());
                    }
                    case 63:
                        break;
                    case 12: {
                        imprimirToken(yytext());
                        return symbol(sym.CorAbierto, yytext());
                    }
                    case 64:
                        break;
                    case 13: {
                        imprimirToken(yytext());
                        return symbol(sym.CorCerrado, yytext());
                    }
                    case 65:
                        break;
                    case 14: {
                        imprimirToken(yytext());
                        return symbol(sym.ParAbierto, yytext());
                    }
                    case 66:
                        break;
                    case 15: {
                        imprimirToken(yytext());
                        return symbol(sym.ParCerrado, yytext());
                    }
                    case 67:
                        break;
                    case 16: {
                        imprimirToken(yytext());
                        return symbol(sym.Coma, yytext());
                    }
                    case 68:
                        break;
                    case 17: {
                        imprimirToken(yytext());
                        painting.appendCGreen(yytext(), panel);
                    }
                    case 69:
                        break;
                    case 18: {
                        imprimirToken(yytext());
                        return symbol(sym.Less1, yytext());
                    }
                    case 70:
                        break;
                    case 19: {
                        imprimirToken(yytext());
                        return symbol(sym.Add1, yytext());
                    }
                    case 71:
                        break;
                    case 20: {
                        imprimirToken(yytext());
                        return symbol(sym.MayorIg, yytext());
                    }
                    case 72:
                        break;
                    case 21: {
                        imprimirToken(yytext());
                        return symbol(sym.MenorIg, yytext());
                    }
                    case 73:
                        break;
                    case 22: {
                        imprimirToken(yytext());
                        return symbol(sym.Igual, yytext());
                    }
                    case 74:
                        break;
                    case 23: {
                        imprimirToken(yytext());
                        return symbol(sym.Diferente, yytext());
                    }
                    case 75:
                        break;
                    case 24: {
                        imprimirToken(yytext());
                        return symbol(sym.Not, yytext());
                    }
                    case 76:
                        break;
                    case 25: {
                        imprimirToken(yytext());
                        return symbol(sym.Or, yytext());
                    }
                    case 77:
                        break;
                    case 26: {
                        imprimirToken(yytext());
                        return symbol(sym.And, yytext());
                    }
                    case 78:
                        break;
                    case 27: {
                        imprimirToken(yytext());
                        return symbol(sym.Asignacion, yytext());
                    }
                    case 79:
                        break;
                    case 28: {
                        imprimirToken(yytext());
                        return symbol(sym.Si_SC, yytext());
                    }
                    case 80:
                        break;
                    case 29: {
                        imprimirToken(yytext());
                        return symbol(sym.Cadena, yytext());
                    }
                    case 81:
                        break;
                    case 30: {
                        imprimirToken(yytext());
                        return symbol(sym.Boolean, yytext());
                    }
                    case 82:
                        break;
                    case 31: {
                        imprimirToken(yytext());
                        return symbol(sym.SiNo_SC, yytext());
                    }
                    case 83:
                        break;
                    case 32: {
                        imprimirToken(yytext());
                        return symbol(sym.Nuevo, yytext());
                    }
                    case 84:
                        break;
                    case 33: {
                        imprimirToken(yytext());
                        return symbol(sym.Clase, yytext());
                    }
                    case 85:
                        break;
                    case 34: {
                        imprimirToken(yytext());
                        return symbol(sym.Vacio, yytext());
                    }
                    case 86:
                        break;
                    case 35: {
                        imprimirToken(yytext());
                        return symbol(sym.Hasta_SC, yytext());
                    }
                    case 87:
                        break;
                    case 36: {
                        imprimirToken(yytext());
                        return symbol(sym.Hacer_SC, yytext());
                    }
                    case 88:
                        break;
                    case 37: {
                        imprimirToken(yytext());
                        return symbol(sym.Desde_SC, yytext());
                    }
                    case 89:
                        break;
                    case 38: {
                        imprimirToken(yytext());
                        return symbol(sym.NamEntero, yytext());
                    }
                    case 90:
                        break;
                    case 39: {
                        imprimirToken(yytext());
                        return symbol(sym.NamCadena, yytext());
                    }
                    case 91:
                        break;
                    case 40: {
                        imprimirToken(yytext());
                        return symbol(sym.NamDecimal, yytext());
                    }
                    case 92:
                        break;
                    case 41: {
                        imprimirToken(yytext());
                        return symbol(sym.NamBoolean, yytext());
                    }
                    case 93:
                        break;
                    case 42: {
                        imprimirToken(yytext());
                        return symbol(sym.Publico, yytext());
                    }
                    case 94:
                        break;
                    case 43: {
                        imprimirToken(yytext());
                        return symbol(sym.Privado, yytext());
                    }
                    case 95:
                        break;
                    case 44: {
                        imprimirToken(yytext());
                        return symbol(sym.Si_NoSi_SC, yytext());
                    }
                    case 96:
                        break;
                    case 45: {
                        imprimirToken(yytext());
                        return symbol(sym.Decimal, yytext());
                    }
                    case 97:
                        break;
                    case 46: {
                        imprimirToken(yytext());
                        return symbol(sym.Extiende, yytext());
                    }
                    case 98:
                        break;
                    case 47: {
                        imprimirToken(yytext());
                        return symbol(sym.Devolver, yytext());
                    }
                    case 99:
                        break;
                    case 48: {
                        imprimirToken(yytext());
                        return symbol(sym.Imprimir, yytext());
                    }
                    case 100:
                        break;
                    case 49: {
                        imprimirToken(yytext());
                        return symbol(sym.Importar, yytext());
                    }
                    case 101:
                        break;
                    case 50: {
                        imprimirToken(yytext());
                        return symbol(sym.Mientras_SC, yytext());
                    }
                    case 102:
                        break;
                    case 51: {
                        imprimirToken(yytext());
                        return symbol(sym.Protegido, yytext());
                    }
                    case 103:
                        break;
                    case 52: {
                        imprimirToken(yytext());
                        return symbol(sym.Incremento_SC, yytext());
                    }
                    case 104:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Converts an int token code into the name of the token by reflection on
     * the cup symbol class/interface sym
     *
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    private String getTokenName(int token) {
        try {
            java.lang.reflect.Field[] classFields = sym.class.getFields();
            for (int i = 0; i < classFields.length; i++) {
                if (classFields[i].getInt(null) == token) {
                    return classFields[i].getName();
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }

        return "UNKNOWN TOKEN";
    }

    /**
     * Same as next_token but also prints the token to standard out for
     * debugging.
     *
     * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
     */
    public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
        java_cup.runtime.Symbol s = next_token();
        System.out.println("line:" + (yyline + 1) + " col:" + (yycolumn + 1) + " --" + yytext() + "--" + getTokenName(s.sym) + "--");
        return s;
    }

    /**
     * Runs the scanner on input files.
     *
     * This main method is the debugging routine for the scanner. It prints
     * debugging information about each returned token to System.out until the
     * end of file is reached, or an error occured.
     *
     * @param argv the command line, contains the filenames to run the scanner
     * on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                Lexer scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new Lexer(reader);
                    while (!scanner.zzAtEOF) {
                        scanner.debug_next_token();
                    }
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }

}
